"""
loczcit_iqr - Biblioteca para detec√ß√£o de outliers em dados di√°rios de Radia√ß√£o de Onda Longa.

Esta biblioteca fornece ferramentas completas para an√°lise da Zona de Converg√™ncia
Intertropical (ZCIT) usando metodologia IQR (Interquartile Range) para detec√ß√£o
de outliers em dados de OLR (Outgoing Longwave Radiation).

ANALOGIA DA BIBLIOTECA üìö
Como uma biblioteca especializada em meteorologia tropical que oferece:
- üîç Lupas especializadas (IQRDetector) para encontrar dados an√¥malos
- üìä Processadores de dados (DataProcessor) para organizar informa√ß√µes clim√°ticas
- üåê Carregadores (NOAADataLoader) para buscar dados da NOAA
- üìà Interpoladores (SplineInterpolator) para criar linhas suaves
- üé® Visualizadores (ZCITVisualizer) para criar mapas e gr√°ficos profissionais
- üìã Climatologias (ClimatologiaZCIT) para compara√ß√£o com padr√µes hist√≥ricos

Modules:
    core: Funcionalidades principais de processamento e an√°lise
    plotting: Visualiza√ß√£o e cria√ß√£o de gr√°ficos profissionais
    utils: Utilidades auxiliares (pentadas, validadores)

Examples:
    An√°lise r√°pida da ZCIT:
    >>> import loczcit_iqr as lz
    >>> loader = lz.NOAADataLoader()
    >>> data = loader.load_data('2024-03-01', '2024-03-31')
    >>> processor = lz.DataProcessor()
    >>> coords = processor.find_minimum_coordinates(data['olr'])
    >>> detector = lz.IQRDetector()
    >>> valid, outliers, stats = detector.detect_outliers(coords)

    Visualiza√ß√£o completa:
    >>> viz = lz.ZCITVisualizer(template='publication')
    >>> fig, ax = viz.quick_plot(data, pentada=30, zcit_coords=valid)

    An√°lise climatol√≥gica:
    >>> status, desvio, interpretacao = lz.analise_zcit_rapida(-0.5, 3)
    >>> print(f"ZCIT est√°: {status}")

Author: LOCZCIT-IQR Development Team
License: MIT
Version: 0.1.0
"""

# Vers√£o da biblioteca
__version__ = "0.0.1"

# Informa√ß√µes sobre a biblioteca
__author__ = "Elivaldo Rocha developer of LOCZCIT-IQR"
__email__ = "carvalhovaldo09@gmail.com"
__license__ = "MIT"
__description__ = "Biblioteca para an√°lise da ZCIT usando metodologia IQR"

# ============================================================================
# IMPORTA√á√ïES CORE (Essenciais)
# ============================================================================

# Data Loading
try:
    from loczcit_iqr.core.data_loader import (
        NOAADataLoader,
        carregar_olr_robusto,
        diagnosticar_arquivo_netcdf,
        load_olr_data,
    )

    _has_data_loader = True
except ImportError as e:
    _has_data_loader = False
    _data_loader_error = str(e)

# Data Processing
try:
    from loczcit_iqr.core.processor import DataProcessor

    _has_processor = True
except ImportError as e:
    _has_processor = False
    _processor_error = str(e)

# IQR Detection
try:
    from loczcit_iqr.core.iqr_detector import IQRDetector

    _has_iqr = True
except ImportError as e:
    _has_iqr = False
    _iqr_error = str(e)

# Spline Interpolation
try:
    from loczcit_iqr.core.spline_interpolator import (
        InterpolationMethod,
        SplineInterpolator,
        SplineParameters,
    )

    _has_spline = True
except ImportError as e:
    _has_spline = False
    _spline_error = str(e)

# Climatologia (M√≥dulo mais complexo)
try:
    from loczcit_iqr.core.climatologia import (  # Fun√ß√µes regionais; Fun√ß√µes temporais; An√°lise e compara√ß√£o; Verifica√ß√µes mensais espec√≠ficas
        ClimatologiaZCIT,
        analisar_climatologia_temporal,
        analise_zcit_rapida,
        calcular_climatologia_personalizada,
        calcular_climatologia_zcit_completa,
        carregar_climatologia,
        climatologia_amazonia_oriental,
        climatologia_atlantico_tropical,
        climatologia_nordeste_brasileiro,
        comparar_climatologias_temporais,
        comparar_com_climatologia_cientifica,
        criar_climatologia_diaria_detalhada,
        criar_climatologia_mensal_rapida,
        criar_climatologia_olr,
        criar_climatologia_pentadas_operacional,
        criar_climatologia_rapida,
        executar_analise_limpa,
        executar_climatologias_completas_zcit,
        obter_climatologia_zcit_1994_2023_NOAA,
        obter_climatologia_zcit_rapida,
        salvar_climatologia,
        validar_climatologia,
        verificar_zcit_abril,
        verificar_zcit_agosto,
        verificar_zcit_dezembro,
        verificar_zcit_fevereiro,
        verificar_zcit_janeiro,
        verificar_zcit_julho,
        verificar_zcit_junho,
        verificar_zcit_maio,
        verificar_zcit_marco,
        verificar_zcit_novembro,
        verificar_zcit_outubro,
        verificar_zcit_setembro,
        visualizar_climatologia,
    )

    _has_climatologia = True
except ImportError as e:
    _has_climatologia = False
    _climatologia_error = str(e)

# ============================================================================
# IMPORTA√á√ïES PLOTTING (Visualiza√ß√£o)
# ============================================================================

try:
    from loczcit_iqr.plotting.visualizer import (
        TEMPLATES,
        ZCITColormap,
        ZCITPlotter,
        ZCITVisualizer,
        check_plotting_dependencies,
        create_publication_figure,
        plot_complete_zcit_analysis,
        plot_zcit_quick,
        plot_zcit_quick_analysis,
    )

    _has_plotting = True
except ImportError as e:
    _has_plotting = False
    _plotting_error = str(e)

try:
    from loczcit_iqr.plotting.style import setup_loczcit_style

    _has_style = True
except ImportError as e:
    _has_style = False
    _style_error = str(e)

# ============================================================================
# IMPORTA√á√ïES UTILS (Utilidades)
# ============================================================================

try:
    from loczcit_iqr.utils.pentadas import (
        PENTADA_DICT,
        date_to_pentada,
        generate_pentada_dict,
        list_pentadas,
        pentada_label,
        pentada_to_dates,
    )

    _has_pentadas = True
except ImportError as e:
    _has_pentadas = False
    _pentadas_error = str(e)

try:
    from loczcit_iqr.utils.validators import (
        validate_coordinates,
        validate_date,
        validate_iqr_constant,
        validate_olr_values,
        validate_pentad_number,
    )

    _has_validators = True
except ImportError as e:
    _has_validators = False
    _validators_error = str(e)

# ============================================================================
# LISTA DE EXPORTA√á√ÉO (__all__)
# ============================================================================

__all__ = [
    # Metadados
    "__version__",
    "__author__",
    "__license__",
    # Fun√ß√µes de conveni√™ncia
    "check_modules",
    "get_version_info",
    "quick_start_guide",
]

# Adicionar exports condicionais baseados na disponibilidade dos m√≥dulos

# Core exports
if _has_data_loader:
    __all__.extend(
        [
            "NOAADataLoader",
            "carregar_olr_robusto",
            "diagnosticar_arquivo_netcdf",
            "load_olr_data",
        ]
    )

if _has_processor:
    __all__.append("DataProcessor")

if _has_iqr:
    __all__.append("IQRDetector")

if _has_spline:
    __all__.extend(
        [
            "InterpolationMethod",
            "SplineInterpolator",
            "SplineParameters",
        ]
    )

if _has_climatologia:
    __all__.extend(
        [
            # Classe principal
            "ClimatologiaZCIT",
            # Fun√ß√µes r√°pidas
            "obter_climatologia_zcit_rapida",
            "obter_climatologia_zcit_1994_2023_NOAA",
            "analise_zcit_rapida",
            "executar_analise_limpa",
            # Fun√ß√µes de an√°lise
            "comparar_com_climatologia_cientifica",
            "calcular_climatologia_zcit_completa",
            "calcular_climatologia_personalizada",
            # Manipula√ß√£o de arquivos
            "salvar_climatologia",
            "carregar_climatologia",
            # Cria√ß√£o de climatologias
            "criar_climatologia_olr",
            "validar_climatologia",
            "visualizar_climatologia",
            "criar_climatologia_rapida",
            # Fun√ß√µes regionais
            "climatologia_nordeste_brasileiro",
            "climatologia_amazonia_oriental",
            "climatologia_atlantico_tropical",
            # Fun√ß√µes temporais
            "executar_climatologias_completas_zcit",
            "criar_climatologia_mensal_rapida",
            "criar_climatologia_diaria_detalhada",
            "criar_climatologia_pentadas_operacional",
            # An√°lise
            "analisar_climatologia_temporal",
            "comparar_climatologias_temporais",
            # Verifica√ß√µes mensais
            "verificar_zcit_janeiro",
            "verificar_zcit_fevereiro",
            "verificar_zcit_marco",
            "verificar_zcit_abril",
            "verificar_zcit_maio",
            "verificar_zcit_junho",
            "verificar_zcit_julho",
            "verificar_zcit_agosto",
            "verificar_zcit_setembro",
            "verificar_zcit_outubro",
            "verificar_zcit_novembro",
            "verificar_zcit_dezembro",
        ]
    )

# Plotting exports
if _has_plotting:
    __all__.extend(
        [
            "TEMPLATES",
            "ZCITColormap",
            "ZCITPlotter",
            "ZCITVisualizer",
            "check_plotting_dependencies",
            "create_publication_figure",
            "plot_complete_zcit_analysis",
            "plot_zcit_quick",
            "plot_zcit_quick_analysis",
        ]
    )

if _has_style:
    __all__.append("setup_loczcit_style")

# Utils exports
if _has_pentadas:
    __all__.extend(
        [
            "PENTADA_DICT",
            "date_to_pentada",
            "generate_pentada_dict",
            "list_pentadas",
            "pentada_label",
            "pentada_to_dates",
        ]
    )

if _has_validators:
    __all__.extend(
        [
            "validate_coordinates",
            "validate_date",
            "validate_iqr_constant",
            "validate_olr_values",
            "validate_pentad_number",
        ]
    )

# ============================================================================
# FUN√á√ïES DE CONVENI√äNCIA E DIAGN√ìSTICO
# ============================================================================


def check_modules(verbose: bool = True) -> dict:
    """
    Verifica quais m√≥dulos est√£o dispon√≠veis na biblioteca loczcit_iqr.

    ANALOGIA DO M√âDICO DIAGN√ìSTICO üè•
    Como um m√©dico que verifica quais "√≥rg√£os" (m√≥dulos) da biblioteca
    est√£o funcionando corretamente e quais precisam de aten√ß√£o.

    Parameters
    ----------
    verbose : bool, default True
        Se True, imprime relat√≥rio detalhado no console

    Returns
    -------
    dict
        Status detalhado de cada m√≥dulo

    Example
    -------
    >>> import loczcit_iqr as lz
    >>> status = lz.check_modules()
    >>> if status['core']['all_available']:
    ...     print("‚úÖ Todos os m√≥dulos core est√£o dispon√≠veis!")
    """

    modules_status = {
        "core": {
            "data_loader": _has_data_loader,
            "processor": _has_processor,
            "iqr_detector": _has_iqr,
            "spline_interpolator": _has_spline,
            "climatologia": _has_climatologia,
            "all_available": all(
                [
                    _has_data_loader,
                    _has_processor,
                    _has_iqr,
                    _has_spline,
                    _has_climatologia,
                ]
            ),
        },
        "plotting": {
            "visualizer": _has_plotting,
            "style": _has_style,
            "all_available": all([_has_plotting, _has_style]),
        },
        "utils": {
            "pentadas": _has_pentadas,
            "validators": _has_validators,
            "all_available": all([_has_pentadas, _has_validators]),
        },
    }

    if verbose:
        print("üåä LOCZCIT-IQR - Status dos M√≥dulos")
        print("=" * 50)

        for category, modules in modules_status.items():
            print(f"\nüì¶ {category.upper()}:")

            for module_name, available in modules.items():
                if module_name == "all_available":
                    continue

                icon = "‚úÖ" if available else "‚ùå"
                print(f"   {icon} {module_name}")

                # Mostrar erro espec√≠fico se dispon√≠vel
                if not available:
                    error_var = f"_{module_name}_error"
                    if error_var in globals():
                        error_msg = globals()[error_var]
                        print(f"      üí° Erro: {error_msg}")

            # Status geral da categoria
            all_ok = modules["all_available"]
            status_icon = "‚úÖ" if all_ok else "‚ö†Ô∏è"
            status_text = "Completo" if all_ok else "Parcial"
            print(f"   {status_icon} Status {category}: {status_text}")

        # Recomenda√ß√µes
        print("\nüí° RECOMENDA√á√ïES:")

        missing_modules = []
        for category, modules in modules_status.items():
            if not modules["all_available"]:
                missing_modules.append(category)

        if missing_modules:
            print(f"   ‚ö†Ô∏è  M√≥dulos com problemas: {', '.join(missing_modules)}")
            print("   üîß Verifique depend√™ncias com: pip install -e .")
        else:
            print("   üéâ Todos os m√≥dulos est√£o funcionando perfeitamente!")

        # Guia r√°pido
        print("\nüìö Para come√ßar, use: lz.quick_start_guide()")

    return modules_status


def get_version_info() -> dict:
    """
    Retorna informa√ß√µes detalhadas sobre a vers√£o da biblioteca.

    Returns
    -------
    dict
        Informa√ß√µes da vers√£o, depend√™ncias e build
    """
    import platform
    import sys

    # Verificar depend√™ncias principais
    dependencies = {}

    try:
        import numpy as np

        dependencies["numpy"] = np.__version__
    except ImportError:
        dependencies["numpy"] = "N√£o instalado"

    try:
        import xarray as xr

        dependencies["xarray"] = xr.__version__
    except ImportError:
        dependencies["xarray"] = "N√£o instalado"

    try:
        import matplotlib

        dependencies["matplotlib"] = matplotlib.__version__
    except ImportError:
        dependencies["matplotlib"] = "N√£o instalado"

    try:
        import cartopy

        dependencies["cartopy"] = cartopy.__version__
    except ImportError:
        dependencies["cartopy"] = "N√£o instalado"

    try:
        import geopandas as gpd

        dependencies["geopandas"] = gpd.__version__
    except ImportError:
        dependencies["geopandas"] = "N√£o instalado"

    return {
        "loczcit_iqr_version": __version__,
        "python_version": sys.version,
        "platform": platform.platform(),
        "dependencies": dependencies,
        "modules_available": check_modules(verbose=False),
        "build_info": {
            "author": __author__,
            "license": __license__,
            "description": __description__,
        },
    }


def quick_start_guide() -> None:
    """
    Exibe um guia r√°pido de uso da biblioteca.

    ANALOGIA DO GUIA TUR√çSTICO üó∫Ô∏è
    Como um guia experiente que mostra os principais pontos tur√≠sticos
    (funcionalidades) da biblioteca de forma organizada e did√°tica.
    """

    print("üåä LOCZCIT-IQR - Guia R√°pido de Uso")
    print("=" * 60)
    print("üìö Biblioteca para an√°lise da ZCIT com detec√ß√£o IQR de outliers")

    print("\nüöÄ AN√ÅLISE R√ÅPIDA (3 passos):")
    print("   1Ô∏è‚É£  import loczcit_iqr as lz")
    print("   2Ô∏è‚É£  coords = lz.DataProcessor().find_minimum_coordinates(data)")
    print("   3Ô∏è‚É£  status = lz.analise_zcit_rapida(-0.5, 3)  # lat, m√™s")

    print("\nüìä CARREGAMENTO DE DADOS:")
    print("   loader = lz.NOAADataLoader()")
    print("   data = loader.load_data('2024-03-01', '2024-03-31')")
    print("   # Busca autom√°tica + download + processamento")

    print("\nüîç DETEC√á√ÉO DE OUTLIERS:")
    print("   detector = lz.IQRDetector(constant=1.5)")
    print("   validos, outliers, stats = detector.detect_outliers(coords)")
    print("   # M√©todo IQR cient√≠fico para dados clim√°ticos")

    print("\nüìà INTERPOLA√á√ÉO E LINHAS:")
    print("   interpolator = lz.SplineInterpolator()")
    print("   linha_zcit, estatisticas = interpolator.interpolate(coords)")
    print("   # Cria linhas suaves da ZCIT")

    print("\nüé® VISUALIZA√á√ÉO PROFISSIONAL:")
    print("   viz = lz.ZCITVisualizer(template='publication')")
    print("   fig, ax = viz.quick_plot(data, pentada=30)")
    print("   # Mapas prontos para artigos cient√≠ficos")

    print("\nüå°Ô∏è AN√ÅLISE CLIMATOL√ìGICA:")
    print("   # Compara√ß√£o com padr√µes hist√≥ricos")
    print("   status, desvio, interpretacao = lz.comparar_com_climatologia_cientifica(")
    print("       mes=3, posicao_encontrada=-0.5")
    print("   )")

    print("\nüìã CLIMATOLOGIAS PERSONALIZADAS:")
    print("   # Para regi√µes espec√≠ficas")
    print("   clima_ne = lz.climatologia_nordeste_brasileiro()")
    print("   clima_amazonia = lz.climatologia_amazonia_oriental()")

    print("\nüîß VERIFICA√á√ÉO DO SISTEMA:")
    print("   lz.check_modules()  # Verifica m√≥dulos instalados")
    print("   lz.get_version_info()  # Informa√ß√µes da vers√£o")

    print("\nüí° DICAS IMPORTANTES:")
    print("   ‚Ä¢ Use templates: 'publication', 'presentation', 'web', 'report'")
    print("   ‚Ä¢ Constantes IQR: 0.75 (restritivo), 1.5 (padr√£o), 3.0 (permissivo)")
    print("   ‚Ä¢ Pentadas: per√≠odos de 5 dias (1-73 por ano)")
    print("   ‚Ä¢ Study areas: BBOX, arquivos .shp/.geojson, ou GeoDataFrames")

    print("\nüìñ DOCUMENTA√á√ÉO COMPLETA:")
    print("   https://loczcit-iqr.readthedocs.io")

    print("\nüéØ EXEMPLO COMPLETO:")
    print("   ```python")
    print("   import loczcit_iqr as lz")
    print("   ")
    print("   # Carregar dados")
    print("   loader = lz.NOAADataLoader()")
    print("   data = loader.load_data('2024-03-01', '2024-03-05')")
    print("   ")
    print("   # Processar e detectar ZCIT")
    print("   processor = lz.DataProcessor()")
    print("   coords = processor.find_minimum_coordinates(data['olr'])")
    print("   ")
    print("   # Detectar outliers")
    print("   detector = lz.IQRDetector()")
    print("   validos, outliers, stats = detector.detect_outliers(coords)")
    print("   ")
    print("   # Visualizar")
    print("   viz = lz.ZCITVisualizer(template='publication')")
    print("   fig, ax = viz.quick_plot(data, pentada=30, zcit_coords=validos)")
    print("   ```")

    # Verificar se m√≥dulos est√£o dispon√≠veis
    module_status = check_modules(verbose=False)

    missing_core = not module_status["core"]["all_available"]
    missing_plotting = not module_status["plotting"]["all_available"]

    if missing_core or missing_plotting:
        print("\n‚ö†Ô∏è  AVISO:")
        if missing_core:
            print("   ‚ùå Alguns m√≥dulos CORE n√£o est√£o dispon√≠veis")
        if missing_plotting:
            print("   ‚ùå M√≥dulos de PLOTTING n√£o est√£o dispon√≠veis")
        print("   üîß Execute: pip install -e . para instalar depend√™ncias")
    else:
        print("\n‚úÖ Todos os m√≥dulos est√£o dispon√≠veis! Boa an√°lise! üåä")


# ============================================================================
# INICIALIZA√á√ÉO E CONFIGURA√á√ÉO AUTOM√ÅTICA
# ============================================================================


def _initialize_library():
    """
    Inicializa√ß√£o autom√°tica da biblioteca.

    Executa configura√ß√µes necess√°rias quando a biblioteca √© importada.
    """
    # Configurar estilo de plotting se dispon√≠vel
    if _has_style:
        try:
            setup_loczcit_style()
        except Exception:
            # Silenciosamente falha se n√£o conseguir configurar estilo
            pass

    # Configurar avisos
    import warnings

    # Suprimir avisos espec√≠ficos que s√£o normais na biblioteca
    warnings.filterwarnings("ignore", category=UserWarning, module="cartopy")
    warnings.filterwarnings("ignore", category=DeprecationWarning, module="matplotlib")


# Executar inicializa√ß√£o
_initialize_library()

# ============================================================================
# MENSAGEM DE BOAS-VINDAS (apenas se importado interativamente)
# ============================================================================


def _show_welcome_message():
    """Mostra mensagem de boas-vindas se importado interativamente."""
    import sys

    # S√≥ mostra se estiver em ambiente interativo
    if hasattr(sys, "ps1") or hasattr(sys, "ps2"):
        print(f"üåä LOCZCIT-IQR v{__version__} carregada!")
        print("   üìñ Use lz.quick_start_guide() para come√ßar")
        print("   üîß Use lz.check_modules() para verificar m√≥dulos")


# Mostrar boas-vindas em ambiente interativo
try:
    _show_welcome_message()
except Exception:
    # Falha silenciosamente se houver qualquer problema
    pass
