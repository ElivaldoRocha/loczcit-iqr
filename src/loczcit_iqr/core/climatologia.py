"""
loczcit_iqr/core/climatologia.py

M√≥dulo para c√°lculo de climatologia cient√≠fica da ZCIT (Zona de Converg√™ncia Intertropical).

Este m√≥dulo fornece funcionalidades para:
- Calcular climatologia baseada em dados hist√≥ricos da NOAA (1979-2023)
- Comparar posi√ß√µes atuais da ZCIT com valores climatol√≥gicos
- Interpretar anomalias meteorol√≥gicas e contexto sazonal
- Validar resultados com base em literatura cient√≠fica
- Usar √°reas de estudo flex√≠veis (BBOX, geometrias, arquivos)

ANALOGIA DO CART√ìGRAFO METEOROL√ìGICO üó∫Ô∏è
Como um cart√≥grafo que pode escolher diferentes "lentes" para mapear o clima:
1. Vista panor√¢mica (dados globais) - para contexto completo
2. √Årea espec√≠fica (BBOX) - para regi√£o de interesse
3. Lupa customizada (geometria exata) - para an√°lise precisa

Refer√™ncias:
    - Waliser & Gautier (1993): "A satellite-derived climatology of the ITCZ"
    - Xie & Philander (1994): "A coupled ocean-atmosphere model of relevance to the ITCZ"
    - Cavalcanti et al. (2009): "Tempo e Clima no Brasil"
    - Ferreira et al. (2005): "LOCZCIT - procedimento num√©rico para ZCIT"

Author: Elivaldo Rocha developer of LOCZCIT-IQR
License: MIT
Version: 0.0.1
"""

from __future__ import annotations

import json
import logging
import warnings
from contextlib import contextmanager
from datetime import datetime
from pathlib import Path
from typing import Any, Optional

import cartopy.crs as ccrs
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import xarray as xr

# Verificar depend√™ncias opcionais
try:
    import geopandas as gpd

    HAS_GEOPANDAS = True
except ImportError:
    HAS_GEOPANDAS = False
    gpd = None

# Importa√ß√µes do LOCZCIT-IQR
from .data_loader import NOAADataLoader
from .iqr_detector import IQRDetector
from .processor import DataProcessor

# Configurar warnings
warnings.filterwarnings("ignore")

# Type aliases
YearRange = tuple[int, int]
AreaBounds = tuple[float, float, float, float]  # (lat_min, lat_max, lon_min, lon_max)
StudyAreaType = Optional[AreaBounds | str | Any]  # Any para geopandas.GeoDataFrame
MonthlyClimatology = dict[int, float]
ClimatologyData = dict[int, dict[str, float | int | list[float]]]

meses_em_portugues = {
    1: "Janeiro",
    2: "Fevereiro",
    3: "Mar√ßo",
    4: "Abril",
    5: "Maio",
    6: "Junho",
    7: "Julho",
    8: "Agosto",
    9: "Setembro",
    10: "Outubro",
    11: "Novembro",
    12: "Dezembro",
}


class ClimatologiaZCIT:
    """
    Classe para calcular a climatologia cient√≠fica da ZCIT baseada em dados hist√≥ricos da NOAA.

    ANALOGIA DO CART√ìGRAFO METEOROL√ìGICO üó∫Ô∏è
    Como um cart√≥grafo que usa diferentes "lentes" para mapear o clima:
    - Vista panor√¢mica (dados globais) para contexto
    - Zoom regional (BBOX) para √°reas espec√≠ficas
    - Lupa de precis√£o (geometria) para an√°lise detalhada

    Esta classe permite:
    - Processar dados hist√≥ricos de OLR para m√∫ltiplos anos
    - Calcular posi√ß√µes m√©dias mensais da ZCIT
    - Gerar estat√≠sticas robustas com remo√ß√£o de outliers
    - Criar visualiza√ß√µes da climatologia calculada
    - Usar diferentes tipos de √°rea de estudo (flex√≠vel como load_data_dual_scale)

    Parameters
    ----------
    anos_inicio : int, default=1979
        Ano inicial para c√°lculo da climatologia
    anos_fim : int, default=2023
        Ano final para c√°lculo da climatologia
    study_area : StudyAreaType, default=None
        √Årea de estudo flex√≠vel. Pode ser:
        - None: Usa geometria padr√£o interna (Area_LOCZCIT.parquet)
        - tuple: (lat_min, lat_max, lon_min, lon_max) para bounding box
        - str: Caminho para arquivo de geometria (.shp, .geojson, .parquet)
        - geopandas.GeoDataFrame: Objeto GeoDataFrame j√° carregado
    mask_to_shape : bool, default=False
        Se True e uma geometria √© fornecida, mascara dados para forma exata.
        Se False, usa recorte por bounding box apenas.

    Attributes
    ----------
    climatologia_mensal : Dict[int, Dict]
        Climatologia calculada por m√™s com estat√≠sticas
    dados_historicos : Dict[int, List]
        Dados hist√≥ricos brutos por m√™s

    Examples
    --------
    >>> # Usar √°rea padr√£o (geometria interna)
    >>> calc = ClimatologiaZCIT(anos_inicio=1990, anos_fim=2020)
    >>> calc.baixar_dados_historicos()
    >>> calc.calcular_climatologia_final()
    >>> climatologia = calc.obter_climatologia_dicionario()
    >>> print(climatologia[3])  # Climatologia para mar√ßo
    -2.5

    >>> # Usar BBOX espec√≠fico
    >>> area_custom = (-15, 10, -60, -20)  # Atl√¢ntico Tropical
    >>> calc = ClimatologiaZCIT(study_area=area_custom)

    >>> # Usar arquivo de geometria
    >>> calc = ClimatologiaZCIT(study_area="minha_area.shp", mask_to_shape=True)

    >>> # Usar GeoDataFrame
    >>> gdf = gpd.read_file("area.geojson")
    >>> calc = ClimatologiaZCIT(study_area=gdf, mask_to_shape=True)
    """

    def __init__(
        self,
        anos_inicio: int = 1979,
        anos_fim: int = 2023,
        study_area: StudyAreaType = None,
        mask_to_shape: bool = False,
    ) -> None:
        """
        Inicializa o calculador de climatologia.

        Parameters
        ----------
        anos_inicio : int
            Ano inicial para climatologia
        anos_fim : int
            Ano final para climatologia
        study_area : StudyAreaType
            √Årea de estudo flex√≠vel (None, tuple, str, GeoDataFrame)
        mask_to_shape : bool
            Se True, mascara para forma exata da geometria
        """
        self.anos_inicio = anos_inicio
        self.anos_fim = anos_fim
        self.study_area = study_area
        self.mask_to_shape = mask_to_shape
        self.loader = NOAADataLoader(cache_dir="./climatologia_cache")
        self.processor = DataProcessor()

        # Dicion√°rios para armazenar resultados
        self.climatologia_mensal: ClimatologyData = {}
        self.dados_historicos: dict[int, list[dict]] = {}

        # Log da configura√ß√£o escolhida
        self._log_configuracao_area()

    def _log_configuracao_area(self) -> None:
        """Log da configura√ß√£o de √°rea escolhida pelo usu√°rio."""
        print("üó∫Ô∏è  CONFIGURA√á√ÉO DA √ÅREA DE ESTUDO:")

        if self.study_area is None:
            print("   üìç Tipo: Geometria padr√£o interna (Area_LOCZCIT.parquet)")
            print(
                f"   üîß Mascaramento: {'Ativo' if self.mask_to_shape else 'BBOX apenas'}"
            )

        elif isinstance(self.study_area, tuple):
            lat_min, lat_max, lon_min, lon_max = self.study_area
            print("   üìç Tipo: Bounding Box personalizado")
            print(f"   üìê Latitude: {lat_min}¬∞ a {lat_max}¬∞")
            print(f"   üìê Longitude: {lon_min}¬∞ a {lon_max}¬∞")
            print("   üîß Mascaramento: N√£o aplic√°vel (BBOX)")

        elif isinstance(self.study_area, str):
            print("   üìç Tipo: Arquivo de geometria")
            print(f"   üìÅ Caminho: {self.study_area}")
            print(
                f"   üîß Mascaramento: {'Ativo' if self.mask_to_shape else 'BBOX apenas'}"
            )

        elif HAS_GEOPANDAS and isinstance(self.study_area, gpd.GeoDataFrame):
            print("   üìç Tipo: GeoDataFrame fornecido")
            print(f"   üìä Geometrias: {len(self.study_area)}")
            print(
                f"   üîß Mascaramento: {'Ativo' if self.mask_to_shape else 'BBOX apenas'}"
            )

        else:
            print("   üìç Tipo: Personalizado/Desconhecido")
            print(
                f"   üîß Mascaramento: {'Ativo' if self.mask_to_shape else 'BBOX apenas'}"
            )

    def baixar_dados_historicos(self, anos_amostra: list[int] | None = None) -> None:
        """
        Baixa e processa dados hist√≥ricos para c√°lculo da climatologia.

        ANALOGIA DO ARQUE√ìLOGO CLIM√ÅTICO üèõÔ∏è
        Como um arque√≥logo que escava camadas de tempo para entender
        os padr√µes clim√°ticos do passado, reconstruindo a "hist√≥ria"
        da ZCIT atrav√©s de m√∫ltiplos anos de dados.

        Parameters
        ----------
        anos_amostra : List[int], optional
            Lista de anos espec√≠ficos para processar. Se None, usa amostragem representativa.

        Raises
        ------
        Exception
            Se houver erro no download ou processamento dos dados
        """
        print("üåç CALCULANDO CLIMATOLOGIA DA ZCIT")
        print(f"üìÖ Per√≠odo: {self.anos_inicio}-{self.anos_fim}")
        print("=" * 60)

        # Se n√£o especificado, usar amostragem representativa
        if anos_amostra is None:
            anos_amostra = self._selecionar_anos_representativos()

        print(f"üìä Processando {len(anos_amostra)} anos representativos:")
        print(f"   {anos_amostra}")

        for ano in anos_amostra:
            print(f"\nüìà Processando ano {ano}...")

            try:
                # USAR LOAD_DATA_DUAL_SCALE PARA FLEXIBILIDADE M√ÅXIMA
                # Esta √© a chave da atualiza√ß√£o - agora usa a mesma l√≥gica flex√≠vel!
                (
                    dados_globais,
                    dados_study_area,
                ) = self.loader.load_data_dual_scale(
                    start_date=f"{ano}-01-01",
                    end_date=f"{ano}-12-31",
                    study_area=self.study_area,  # ‚úÖ Flex√≠vel: None, tuple, str, GeoDataFrame
                    auto_download=True,
                    quality_control=True,
                    remove_leap_days=True,
                    return_study_area_subset=True,
                    mask_to_shape=self.mask_to_shape,  # ‚úÖ Mascaramento opcional
                )

                # Usar dados da √°rea de estudo se dispon√≠vel, sen√£o usar globais
                dados_ano = (
                    dados_study_area if dados_study_area is not None else dados_globais
                )

                if dados_ano is not None:
                    # Processar dados mensais
                    self._processar_dados_anuais(dados_ano, ano)
                    print(f"‚úÖ Ano {ano} processado com sucesso")

                    # Log do tamanho dos dados processados
                    if dados_study_area is not None:
                        print(
                            f"   üìè Dados da √°rea de estudo: {dados_study_area.sizes}"
                        )
                    else:
                        print(f"   üìè Dados globais utilizados: {dados_globais.sizes}")

                else:
                    print(f"‚ùå Falha ao carregar dados de {ano}")

            except Exception as e:
                print(f"‚ùå Erro no ano {ano}: {e}")
                continue

    def _selecionar_anos_representativos(self) -> list[int]:
        """
        Seleciona anos representativos para climatologia eficiente.

        ANALOGIA DO ESTAT√çSTICO CLIM√ÅTICO üìä
        Como um estat√≠stico que escolhe uma "amostra representativa"
        da popula√ß√£o de anos, garantindo que capture diferentes
        condi√ß√µes clim√°ticas (El Ni√±o, La Ni√±a, anos neutros).

        Estrat√©gia:
        - Eventos ENSO diferentes (El Ni√±o, La Ni√±a, Neutro)
        - D√©cadas diferentes para capturar variabilidade
        - Anos com dados completos e confi√°veis

        Returns
        -------
        List[int]
            Lista de anos representativos filtrados pelo per√≠odo dispon√≠vel
        """
        # Anos representativos baseados em fases ENSO e disponibilidade
        anos_representativos = [
            # D√©cada de 1980 (dados iniciais)
            1982,  # El Ni√±o forte
            1985,  # Neutro
            1988,  # La Ni√±a
            # D√©cada de 1990
            1992,  # Neutro
            1995,  # La Ni√±a
            1997,  # El Ni√±o forte
            # D√©cada de 2000
            2001,  # La Ni√±a
            2005,  # Neutro
            2009,  # El Ni√±o
            # D√©cada de 2010
            2010,  # La Ni√±a forte
            2015,  # El Ni√±o muito forte
            2018,  # La Ni√±a
            # D√©cada de 2020 (mais recente)
            2020,  # La Ni√±a
            2022,  # La Ni√±a persistente
        ]

        # Filtrar apenas anos dentro do per√≠odo dispon√≠vel
        anos_filtrados = [
            ano
            for ano in anos_representativos
            if self.anos_inicio <= ano <= self.anos_fim
        ]

        return anos_filtrados

    def _processar_dados_anuais(self, dados_ano: xr.Dataset, ano: int) -> None:
        """
        Processa dados anuais para extrair posi√ß√µes mensais da ZCIT.

        Parameters
        ----------
        dados_ano : xr.Dataset
            Dataset com dados anuais de OLR
        ano : int
            Ano dos dados sendo processados
        """
        # Agrupar por m√™s
        dados_mensais = dados_ano.groupby("time.month")

        for mes, dados_mes in dados_mensais:
            # Calcular m√©dia mensal
            media_mensal = dados_mes.olr.mean(dim="time")

            try:
                # Encontrar posi√ß√µes da ZCIT usando LOCZCIT-IQR
                coords_zcit = self.processor.find_minimum_coordinates(
                    media_mensal, method="column_minimum"
                )

                # Calcular posi√ß√£o m√©dia da ZCIT para este m√™s
                if coords_zcit:
                    lats_zcit = [coord[1] for coord in coords_zcit]
                    posicao_media = np.mean(lats_zcit)

                    # Armazenar resultado
                    if mes not in self.dados_historicos:
                        self.dados_historicos[mes] = []

                    self.dados_historicos[mes].append(
                        {
                            "ano": ano,
                            "posicao_lat": posicao_media,
                            "num_pontos": len(coords_zcit),
                            "olr_medio": float(media_mensal.mean()),
                        }
                    )

            except Exception as e:
                print(f"‚ö†Ô∏è  Erro no m√™s {mes}/{ano}: {e}")
                continue

    def calcular_climatologia_final(self) -> None:
        """
        Calcula a climatologia final baseada nos dados hist√≥ricos processados.

        Aplica estat√≠sticas robustas com remo√ß√£o de outliers extremos (> 3œÉ)
        e calcula m√©dias, desvios padr√£o e outras estat√≠sticas por m√™s.
        """
        print("\nüßÆ CALCULANDO CLIMATOLOGIA FINAL...")

        for mes in range(1, 13):
            if mes in self.dados_historicos:
                dados_mes = self.dados_historicos[mes]

                if dados_mes:
                    posicoes = [d["posicao_lat"] for d in dados_mes]

                    # Estat√≠sticas robustas
                    media = np.mean(posicoes)
                    desvio = np.std(posicoes)

                    # Remover outliers extremos (> 3 desvios padr√£o)
                    posicoes_filtradas = [
                        p for p in posicoes if abs(p - media) <= 3 * desvio
                    ]

                    # Recalcular sem outliers
                    if posicoes_filtradas:
                        media_final = np.mean(posicoes_filtradas)
                        desvio_final = np.std(posicoes_filtradas)
                    else:
                        media_final = media
                        desvio_final = desvio

                    self.climatologia_mensal[mes] = {
                        "posicao_media": round(media_final, 1),
                        "desvio_padrao": round(desvio_final, 1),
                        "num_anos": len(posicoes_filtradas),
                        "posicoes_brutas": posicoes,
                    }

                    print(
                        f"üìÖ M√™s {mes:2d}: {media_final:+5.1f}¬∞ ¬± {desvio_final:.1f}¬∞ "
                        f"({len(posicoes_filtradas)} anos)"
                    )

            else:
                print(f"‚ùå M√™s {mes}: Sem dados suficientes")

    def obter_climatologia_dicionario(self) -> MonthlyClimatology:
        """
        Retorna a climatologia em formato de dicion√°rio simples.

        Returns
        -------
        Dict[int, float]
            Dicion√°rio com posi√ß√£o m√©dia da ZCIT por m√™s {m√™s: latitude}
        """
        return {
            mes: dados["posicao_media"]
            for mes, dados in self.climatologia_mensal.items()
        }

    def plotar_climatologia(self) -> None:
        """
        Cria visualiza√ß√£o da climatologia calculada.

        Gera gr√°fico com posi√ß√µes mensais, barras de erro (desvio padr√£o),
        linha do equador e anota√ß√µes dos valores.

        Raises
        ------
        ValueError
            Se a climatologia n√£o foi calculada ainda
        """
        if not self.climatologia_mensal:
            raise ValueError(
                "Climatologia n√£o calculada. Execute calcular_climatologia_final() primeiro."
            )

        # Preparar dados para plot
        meses = list(range(1, 13))
        posicoes = [
            self.climatologia_mensal.get(mes, {}).get("posicao_media", 0)
            for mes in meses
        ]
        desvios = [
            self.climatologia_mensal.get(mes, {}).get("desvio_padrao", 0)
            for mes in meses
        ]

        # Nomes dos meses
        nomes_meses = [
            "Jan",
            "Fev",
            "Mar",
            "Abr",
            "Mai",
            "Jun",
            "Jul",
            "Ago",
            "Set",
            "Out",
            "Nov",
            "Dez",
        ]

        # Criar figura
        fig, ax = plt.subplots(figsize=(12, 8))

        # Plot principal
        ax.plot(
            meses,
            posicoes,
            "o-",
            linewidth=3,
            markersize=8,
            color="blue",
            label="Posi√ß√£o Climatol√≥gica da ZCIT",
        )

        # Barras de erro (desvio padr√£o)
        ax.errorbar(
            meses,
            posicoes,
            yerr=desvios,
            fmt="none",
            capsize=5,
            capthick=2,
            color="red",
            alpha=0.7,
            label="Desvio Padr√£o",
        )

        # Linha do equador
        ax.axhline(
            y=0,
            color="black",
            linestyle="--",
            alpha=0.7,
            linewidth=2,
            label="Equador (0¬∞)",
        )

        # Personaliza√ß√£o
        ax.set_xlabel("M√™s", fontsize=14, fontweight="bold")
        ax.set_ylabel("Latitude da ZCIT (¬∞N)", fontsize=14, fontweight="bold")

        # T√≠tulo din√¢mico baseado na √°rea de estudo
        area_desc = self._obter_descricao_area()
        ax.set_title(
            f"Climatologia da ZCIT - {area_desc}\n"
            f"Baseada em dados NOAA ({self.anos_inicio}-{self.anos_fim})",
            fontsize=16,
            fontweight="bold",
        )

        # Configurar eixos
        ax.set_xticks(meses)
        ax.set_xticklabels(nomes_meses)
        ax.grid(True, alpha=0.3)
        ax.legend(fontsize=12)

        # Adicionar valores nas barras
        for i, (pos, dev) in enumerate(zip(posicoes, desvios, strict=False)):
            if self.climatologia_mensal.get(i + 1):
                ax.annotate(
                    f"{pos:+.1f}¬∞",
                    (i + 1, pos),
                    textcoords="offset points",
                    xytext=(0, 10),
                    ha="center",
                    fontsize=10,
                    fontweight="bold",
                )

        plt.tight_layout()
        plt.show()

        # Imprimir resumo
        print("\nüìã RESUMO DA CLIMATOLOGIA:")
        print(f"   √Årea de estudo: {area_desc}")
        print(
            f"   Posi√ß√£o mais ao sul: {min(posicoes):.1f}¬∞N "
            f"(m√™s {posicoes.index(min(posicoes)) + 1})"
        )
        print(
            f"   Posi√ß√£o mais ao norte: {max(posicoes):.1f}¬∞N "
            f"(m√™s {posicoes.index(max(posicoes)) + 1})"
        )
        print(f"   Amplitude anual: {max(posicoes) - min(posicoes):.1f}¬∞")

    def _obter_descricao_area(self) -> str:
        """Retorna descri√ß√£o da √°rea de estudo para t√≠tulos e relat√≥rios."""
        if self.study_area is None:
            return "√Årea Padr√£o LOCZCIT"
        if isinstance(self.study_area, tuple):
            lat_min, lat_max, lon_min, lon_max = self.study_area
            return f"BBOX ({lat_min}¬∞-{lat_max}¬∞N, {lon_min}¬∞-{lon_max}¬∞E)"
        if isinstance(self.study_area, str):
            return f"Geometria: {Path(self.study_area).name}"
        if HAS_GEOPANDAS and isinstance(self.study_area, gpd.GeoDataFrame):
            return f"GeoDataFrame ({len(self.study_area)} geometrias)"
        return "√Årea Customizada"


def calcular_climatologia_zcit_completa(
    study_area: StudyAreaType = None,
    mask_to_shape: bool = False,
    anos_inicio: int = 1979,
    anos_fim: int = 2023,
) -> tuple[MonthlyClimatology | None, ClimatologiaZCIT | None]:
    """
    Fun√ß√£o principal para calcular a climatologia cient√≠fica da ZCIT com √°rea flex√≠vel.

    ANALOGIA DO DIRETOR DE ORQUESTRA CLIM√ÅTICA üéº
    Como um maestro que coordena diferentes instrumentos (dados) e m√∫sicos (anos)
    para criar uma sinfonia harmoniosa (climatologia), esta fun√ß√£o rege todo
    o processo de c√°lculo usando a √°rea de estudo mais adequada.

    Parameters
    ----------
    study_area : StudyAreaType, default=None
        √Årea de estudo flex√≠vel. Pode ser:
        - None: Usa geometria padr√£o interna (Area_LOCZCIT.parquet)
        - tuple: (lat_min, lat_max, lon_min, lon_max) para bounding box
        - str: Caminho para arquivo de geometria (.shp, .geojson, .parquet)
        - geopandas.GeoDataFrame: Objeto GeoDataFrame j√° carregado
    mask_to_shape : bool, default=False
        Se True e uma geometria √© fornecida, mascara dados para forma exata.
        Se False, usa recorte por bounding box apenas.
    anos_inicio : int, default=1979
        Ano inicial para climatologia
    anos_fim : int, default=2023
        Ano final para climatologia

    Returns
    -------
    Tuple[Optional[Dict[int, float]], Optional[ClimatologiaZCIT]]
        Tupla com climatologia calculada e inst√¢ncia da classe, ou (None, None) se erro

    Examples
    --------
    >>> # Usar √°rea padr√£o
    >>> climatologia, calculadora = calcular_climatologia_zcit_completa()
    >>> if climatologia:
    ...     print(f"ZCIT em mar√ßo: {climatologia[3]:.1f}¬∞N")

    >>> # Usar BBOX espec√≠fico
    >>> area_ne = (-18, -2, -48, -32)  # Nordeste do Brasil
    >>> clima_ne, calc_ne = calcular_climatologia_zcit_completa(study_area=area_ne)

    >>> # Usar arquivo de geometria com mascaramento
    >>> clima_geo, calc_geo = calcular_climatologia_zcit_completa(
    ...     study_area="minha_bacia.shp",
    ...     mask_to_shape=True
    ... )

    >>> # Usar GeoDataFrame
    >>> gdf = gpd.read_file("regioes_climaticas.geojson")
    >>> clima_gdf, calc_gdf = calcular_climatologia_zcit_completa(
    ...     study_area=gdf,
    ...     mask_to_shape=True
    ... )
    """
    print("üåä INICIANDO C√ÅLCULO DA CLIMATOLOGIA CIENT√çFICA DA ZCIT")
    print("=" * 65)

    # Inicializar calculadora com configura√ß√£o flex√≠vel
    calc_clima = ClimatologiaZCIT(
        anos_inicio=anos_inicio,
        anos_fim=anos_fim,
        study_area=study_area,  # ‚úÖ Agora flex√≠vel!
        mask_to_shape=mask_to_shape,  # ‚úÖ Mascaramento opcional!
    )

    try:
        # 1. Baixar e processar dados hist√≥ricos
        calc_clima.baixar_dados_historicos()

        # 2. Calcular climatologia final
        calc_clima.calcular_climatologia_final()

        # 3. Obter resultado em formato dicion√°rio
        climatologia_final = calc_clima.obter_climatologia_dicionario()

        # 4. Plotar resultados
        calc_clima.plotar_climatologia()

        # 5. Retornar climatologia calculada
        print("\nüéØ CLIMATOLOGIA CIENT√çFICA CALCULADA:")
        print(f"climatologia = {climatologia_final}")

        return climatologia_final, calc_clima

    except Exception as e:
        print(f"‚ùå Erro no c√°lculo da climatologia: {e}")
        return None, None


def obter_climatologia_zcit_rapida() -> MonthlyClimatology:
    """
    Retorna climatologia pr√©-calculada baseada em literatura cient√≠fica.

    Valores baseados em estudos de:
    - Waliser & Gautier (1993) - Journal of Climate
    - Xie & Philander (1994) - Journal of Climate
    - Cavalcanti et al. (2009) - Tempo e Clima no Brasil
    - Ferreira et al. (2005) - Revista Brasileira de Meteorologia

    Returns
    -------
    Dict[int, float]
        Climatologia da ZCIT para Atl√¢ntico Tropical (regi√£o 40¬∞W)

    Examples
    --------
    >>> clima = obter_climatologia_zcit_rapida()
    >>> print(f"ZCIT em julho: {clima[7]:.1f}¬∞N")
    8.5
    """
    # Climatologia baseada em literatura cient√≠fica validada
    # Valores para o Atl√¢ntico Tropical (regi√£o 40¬∞W)
    climatologia_cientifica: MonthlyClimatology = {
        1: -1.5,  # Janeiro - ver√£o austral, ZCIT mais ao sul
        2: -3.0,  # Fevereiro - pico ao sul
        3: -2.5,  # Mar√ßo - ainda ao sul mas subindo
        4: 0.5,  # Abril - transi√ß√£o
        5: 3.5,  # Maio - subindo para norte
        6: 6.0,  # Junho - inverno austral, ZCIT ao norte
        7: 8.5,  # Julho - pico ao norte
        8: 9.0,  # Agosto - posi√ß√£o mais ao norte
        9: 7.0,  # Setembro - come√ßando a descer
        10: 4.0,  # Outubro - transi√ß√£o
        11: 1.0,  # Novembro - descendo
        12: -0.5,  # Dezembro - voltando ao sul
    }

    print("üìö Usando climatologia baseada em literatura cient√≠fica")
    print("üìñ Refer√™ncias: Waliser & Gautier (1993), Xie & Philander (1994)")

    return climatologia_cientifica


def obter_climatologia_zcit_1994_2023_NOAA(
    climatologia_pre_calculada: MonthlyClimatology = None,
) -> MonthlyClimatology:
    """
    Retorna climatologia pr√©-calculada baseada em climatologia NOAA de 1994 a 2023.

    Returns
    -------
    Dict[int, float]
        Climatologia da ZCIT pre calculada para o per√≠odo 1994-2023.

    Examples
    --------
    >>> clima = obter_climatologia_zcit_1994_2023_NOAA()
    >>> print(f"ZCIT em julho: {clima[7]:.1f}¬∞N")
    8.5
    """
    if climatologia_pre_calculada is not None:
        print("üìö Usando climatologia pr√©-calculada fornecida")
        return climatologia_pre_calculada
    # Aviso pra inserir climatologia pre calculada
    print("‚ö†Ô∏è  Climatologia pr√©-calculada n√£o fornecida")
    print(
        "üôè Por favor, forne√ßa uma climatologia pr√©-calculada ou use a fun√ß√£o obter_climatologia_zcit_rapida()"
    )
    print(
        "‚ö†Ô∏è Lembrete: Dicionario deve conter meses como chaves (1-12) e valores de latitude da ZCIT"
    )
    return (
        obter_climatologia_zcit_rapida()
    )  # Retorna a climatologia r√°pida como fallback


def _interpretar_anomalia_meteorologica(
    mes: int, diferenca: float, desvios_sigma: float
) -> str:
    """
    Interpreta√ß√£o meteorol√≥gica contextual da anomalia.

    Parameters
    ----------
    mes : int
        M√™s da an√°lise (1-12)
    diferenca : float
        Diferen√ßa da posi√ß√£o climatol√≥gica (graus)
    desvios_sigma : float
        N√∫mero de desvios padr√£o da anomalia

    Returns
    -------
    str
        Interpreta√ß√£o meteorol√≥gica da anomalia
    """
    if abs(diferenca) < 1.5:
        return "A ZCIT est√° em posi√ß√£o t√≠pica para a √©poca do ano. Padr√£o atmosf√©rico normal."

    # Interpreta√ß√£o baseada na dire√ß√£o e magnitude da anomalia
    if diferenca > 0:  # ZCIT mais ao norte
        if mes in [1, 2, 3, 4]:  # Ver√£o austral
            return (
                "ZCIT an√¥malamente ao norte para o ver√£o. "
                "Pode indicar: (1) Anomalia de TSM no Atl√¢ntico Sul, "
                "(2) Influ√™ncia de El Ni√±o, (3) Padr√£o an√¥malo de precipita√ß√£o no Norte/Nordeste."
            )
        if mes in [6, 7, 8, 9]:  # Inverno austral
            return (
                "ZCIT muito ao norte - intensifica√ß√£o do padr√£o de inverno. "
                "Pode resultar em: (1) Seca severa no Nordeste, "
                "(2) Maior atividade convectiva no Caribe/Venezuela."
            )
        # Transi√ß√£o
        return (
            "ZCIT ao norte durante transi√ß√£o sazonal. "
            "Pode afetar in√≠cio/fim da esta√ß√£o chuvosa."
        )

    # ZCIT mais ao sul
    if mes in [1, 2, 3, 4]:  # Ver√£o austral
        return (
            "ZCIT extremamente ao sul - intensifica√ß√£o do ver√£o. "
            "Pode causar: (1) Chuvas excessivas no Norte/Nordeste, "
            "(2) Poss√≠vel influ√™ncia de La Ni√±a, (3) Anomalias de TSM."
        )
    if mes in [6, 7, 8, 9]:  # Inverno austral
        return (
            "ZCIT an√¥malamente ao sul para o inverno. "
            "Pode indicar: (1) Enfraquecimento dos ventos al√≠sios, "
            "(2) Anomalia de press√£o atmosf√©rica, (3) Chuvas fora de √©poca."
        )
    # Transi√ß√£o
    return "ZCIT ao sul durante transi√ß√£o - poss√≠vel antecipa√ß√£o/atraso sazonal."


def _obter_contexto_sazonal(
    mes: int, posicao_encontrada: float, posicao_climatologica: float
) -> str:
    """
    Fornece contexto sazonal para a posi√ß√£o da ZCIT.

    Parameters
    ----------
    mes : int
        M√™s da an√°lise (1-12)
    posicao_encontrada : float
        Posi√ß√£o da ZCIT encontrada na an√°lise
    posicao_climatologica : float
        Posi√ß√£o climatol√≥gica da ZCIT para o m√™s

    Returns
    -------
    str
        Contexto sazonal e impactos esperados
    """
    contextos_sazonais = {
        1: "Ver√£o austral - ZCIT tipicamente ao sul, favorecendo chuvas no Norte/Nordeste",
        2: "Pico do ver√£o - ZCIT em posi√ß√£o mais austral do ano",
        3: "Final do ver√£o - ZCIT come√ßando migra√ß√£o para norte",
        4: "Outono - ZCIT em transi√ß√£o, per√≠odo cr√≠tico para previs√£o de chuvas",
        5: "Fim das chuvas no Norte - ZCIT migrando para norte",
        6: "In√≠cio do inverno austral - ZCIT se estabelecendo ao norte",
        7: "Inverno - ZCIT no hemisf√©rio norte, seca no Nordeste",
        8: "Pico do inverno - ZCIT em posi√ß√£o mais setentrional",
        9: "Final do inverno - ZCIT iniciando retorno para sul",
        10: "Primavera - ZCIT em transi√ß√£o para sul",
        11: "Pr√©-ver√£o - ZCIT se aproximando da posi√ß√£o de ver√£o",
        12: "In√≠cio do ver√£o - ZCIT migrando para posi√ß√£o austral",
    }

    contexto_base = contextos_sazonais.get(mes, "Per√≠odo de transi√ß√£o sazonal")

    # Adicionar informa√ß√£o sobre impactos
    if mes in [1, 2, 3, 4, 5] and posicao_encontrada < posicao_climatologica:
        impacto = "Poss√≠vel intensifica√ß√£o das chuvas na regi√£o Norte/Nordeste."
    elif mes in [6, 7, 8, 9] and posicao_encontrada > posicao_climatologica:
        impacto = "Poss√≠vel intensifica√ß√£o da seca no Nordeste brasileiro."
    elif mes in [1, 2, 3, 4, 5] and posicao_encontrada > posicao_climatologica:
        impacto = "Poss√≠vel redu√ß√£o das chuvas na regi√£o Norte/Nordeste."
    elif mes in [6, 7, 8, 9] and posicao_encontrada < posicao_climatologica:
        impacto = "Poss√≠vel al√≠vio da seca no Nordeste brasileiro."
    else:
        impacto = "Padr√£o dentro do esperado para a √©poca."

    return f"{contexto_base}. {impacto}"


def comparar_com_climatologia_cientifica(
    mes: int,
    posicao_encontrada: float,
    usar_climatologia_calculada: bool = True,
) -> tuple[str, float, str]:
    """
    Compara a posi√ß√£o encontrada com climatologia cient√≠fica.

    Parameters
    ----------
    mes : int
        M√™s da an√°lise (1-12)
    posicao_encontrada : float
        Posi√ß√£o da ZCIT encontrada na an√°lise (graus latitude)
    usar_climatologia_calculada : bool, default=True
        Se True, tenta usar climatologia calculada. Se False, usa literatura.

    Returns
    -------
    Tuple[str, float, str]
        Status da anomalia, diferen√ßa em graus, e interpreta√ß√£o meteorol√≥gica

    Examples
    --------
    >>> status, desvio, interpretacao = comparar_com_climatologia_cientifica(3, -0.32)
    >>> print(f"Status: {status}, Desvio: {desvio:.1f}¬∞")
    Status: NORMAL, Desvio: 2.2¬∞
    """
    if usar_climatologia_calculada:
        try:
            # Tentar usar climatologia calculada
            climatologia, _ = calcular_climatologia_zcit_completa()
            if climatologia is None:
                raise Exception("Falha no c√°lculo")
        except Exception:
            print("‚ö†Ô∏è  Falha na climatologia calculada, usando literatura cient√≠fica")
            climatologia = obter_climatologia_zcit_rapida()
    else:
        climatologia = obter_climatologia_zcit_rapida()

    # Desvios padr√£o t√≠picos (baseados em variabilidade observada)
    desvio_climatologico = {
        1: 2.0,
        2: 2.5,
        3: 2.2,
        4: 1.8,
        5: 1.5,
        6: 1.2,
        7: 1.0,
        8: 1.1,
        9: 1.3,
        10: 1.6,
        11: 1.9,
        12: 2.1,
    }

    posicao_climatologica = climatologia.get(mes, 0)
    desvio_padrao = desvio_climatologico.get(mes, 2.0)
    diferenca = posicao_encontrada - posicao_climatologica

    # Nomes dos meses para display

    print("\nüìä COMPARA√á√ÉO COM CLIMATOLOGIA CIENT√çFICA:")
    print("üìÖ M√™s analisado: {nomes_meses.get(mes, mes)}")
    if posicao_encontrada > 0:
        print("üìç Posi√ß√£o encontrada: {posicao_encontrada:+5.1f}¬∞N")
    elif posicao_encontrada < 0:
        print("üìç Posi√ß√£o encontrada: {posicao_encontrada:+5.1f}¬∞S")
    else:
        print("üìç Posi√ß√£o encontrada: {posicao_encontrada:+5.1f}¬∞ (Linha do Equador)")

    print(
        "üìñ Posi√ß√£o climatol√≥gica: {posicao_climatologica:+5.1f}¬∞N (¬±{desvio_padrao:.1f}¬∞)"
    )
    print(
        "üìè Diferen√ßa: {diferenca:+5.1f}¬∞ ({abs(diferenca/desvio_padrao):.1f} desvios padr√£o)"
    )

    # C√°lculo de percentual de anomalia
    if posicao_climatologica != 0:
        percentual = (diferenca / abs(posicao_climatologica)) * 100
        print(f"üìà Anomalia percentual: {percentual:+5.1f}%")

    # Classifica√ß√£o estat√≠stica baseada em desvios padr√£o
    desvios_sigma = abs(diferenca) / desvio_padrao

    if desvios_sigma < 1.0:
        print("‚úÖ Posi√ß√£o dentro da variabilidade normal (< 1œÉ)")
        status = "NORMAL"
        cor_status = "üü¢"
    elif desvios_sigma < 2.0:
        print("‚ö†Ô∏è  Anomalia moderada (1-2œÉ)")
        status = "ANOMALIA_MODERADA"
        cor_status = "üü°"
    elif desvios_sigma < 3.0:
        print("üî∂ Anomalia forte (2-3œÉ)")
        status = "ANOMALIA_FORTE"
        cor_status = "üü†"
    else:
        print("üö® Anomalia extrema (> 3œÉ) - evento muito raro!")
        status = "ANOMALIA_EXTREMA"
        cor_status = "üî¥"

    # Interpreta√ß√£o meteorol√≥gica contextual
    interpretacao = _interpretar_anomalia_meteorologica(mes, diferenca, desvios_sigma)

    print(f"\nüå°Ô∏è  STATUS CLIMATOL√ìGICO: {cor_status} {status}")
    print("üìù INTERPRETA√á√ÉO METEOROL√ìGICA:")
    print(f"   {interpretacao}")

    # Contexto sazonal
    contexto = _obter_contexto_sazonal(mes, posicao_encontrada, posicao_climatologica)
    print("\nüåä CONTEXTO SAZONAL:")
    print(f"   {contexto}")

    return status, diferenca, interpretacao


def calcular_climatologia_personalizada(
    cache_dir: str = "cache",
    study_area: StudyAreaType = None,
    anos_amostra: list[int] | None = None,
    mask_to_shape: bool = False,
) -> MonthlyClimatology:
    """
    Calcular climatologia com √°rea de estudo totalmente customiz√°vel.

    ANALOGIA DO ALFAIATE CLIM√ÅTICO ‚úÇÔ∏è
    Como um alfaiate que corta o tecido (dados clim√°ticos) exatamente
    na medida desejada, esta fun√ß√£o permite "costurar" uma climatologia
    sob medida para qualquer √°rea de interesse.

    Parameters
    ----------
    study_area : StudyAreaType, optional
        √Årea de estudo flex√≠vel. Pode ser:
        - None: Usa geometria padr√£o interna (Area_LOCZCIT.parquet)
        - tuple: (lat_min, lat_max, lon_min, lon_max) para bounding box
        - str: Caminho para arquivo de geometria (.shp, .geojson, .parquet)
        - geopandas.GeoDataFrame: Objeto GeoDataFrame j√° carregado

    anos_amostra : List[int], optional
        Anos para usar no c√°lculo. Se None, usa amostra representativa padr√£o.

    mask_to_shape : bool, default=False
        Se True e uma geometria √© fornecida, mascara dados para forma exata.
        Se False, usa recorte por bounding box apenas.

    Returns
    -------
    Dict[int, float]
        Climatologia calculada por m√™s (1-12) com posi√ß√£o m√©dia da ZCIT

    Examples
    --------
    >>> # Usar √°rea padr√£o
    >>> clima = calcular_climatologia_personalizada()
    >>> print(f"ZCIT em mar√ßo: {clima[3]:.1f}¬∞N")

    >>> # Definir BBOX espec√≠fico
    >>> area_ne = (-18, -2, -48, -32)  # Nordeste do Brasil
    >>> clima = calcular_climatologia_personalizada(study_area=area_ne)

    >>> # Usar arquivo de geometria com mascaramento
    >>> clima = calcular_climatologia_personalizada(
    ...     study_area="bacia_amazonica.shp",
    ...     mask_to_shape=True
    ... )

    >>> # Usar GeoDataFrame com anos espec√≠ficos
    >>> gdf = gpd.read_file("regioes.geojson")
    >>> anos = [2015, 2018, 2020, 2022]
    >>> clima = calcular_climatologia_personalizada(
    ...     study_area=gdf,
    ...     anos_amostra=anos,
    ...     mask_to_shape=True
    ... )
    """
    print("üî¨ CALCULANDO CLIMATOLOGIA PERSONALIZADA...")

    # ========================================================================
    # 1. VALIDAR E DESCREVER √ÅREA DE ESTUDO
    # ========================================================================

    if study_area is None:
        print("üåç Usando geometria padr√£o interna (Area_LOCZCIT.parquet)")
        area_desc = "√Årea padr√£o LOCZCIT"
    elif isinstance(study_area, tuple) and len(study_area) == 4:
        lat_min, lat_max, lon_min, lon_max = study_area
        print("üåç Usando BBOX personalizado:")
        print(f"   üìê Latitude: {lat_min}¬∞ a {lat_max}¬∞")
        print(f"   üìê Longitude: {lon_min}¬∞ a {lon_max}¬∞")
        area_desc = f"BBOX ({lat_min}¬∞-{lat_max}¬∞N, {lon_min}¬∞-{lon_max}¬∞E)"

        # Validar BBOX
        if lat_min >= lat_max:
            raise ValueError(
                f"Latitude m√≠nima ({lat_min}) deve ser menor que m√°xima ({lat_max})"
            )
        if lon_min >= lon_max:
            raise ValueError(
                f"Longitude m√≠nima ({lon_min}) deve ser menor que m√°xima ({lon_max})"
            )
        if lat_min < -90 or lat_max > 90:
            raise ValueError("Latitudes devem estar entre -90 e 90¬∞")
        if lon_min < -180 or lon_max > 180:
            raise ValueError("Longitudes devem estar entre -180 e 180¬∞")

    elif isinstance(study_area, str):
        print(f"üåç Usando arquivo de geometria: {study_area}")
        print(f"   üîß Mascaramento: {'Ativo' if mask_to_shape else 'BBOX apenas'}")
        area_desc = f"Geometria: {Path(study_area).name}"

        # Verificar se arquivo existe
        if not Path(study_area).exists():
            raise FileNotFoundError(
                f"Arquivo de geometria n√£o encontrado: {study_area}"
            )

    elif HAS_GEOPANDAS and isinstance(study_area, gpd.GeoDataFrame):
        print("üåç Usando GeoDataFrame fornecido:")
        print(f"   üìä Geometrias: {len(study_area)}")
        print(f"   üîß Mascaramento: {'Ativo' if mask_to_shape else 'BBOX apenas'}")
        area_desc = f"GeoDataFrame ({len(study_area)} geometrias)"

    else:
        print("üåç √Årea de estudo customizada/desconhecida")
        area_desc = "√Årea customizada"

    # ========================================================================
    # 2. DEFINIR ANOS DE AMOSTRA
    # ========================================================================

    if anos_amostra is None:
        # Anos representativos para c√°lculo r√°pido e robusto
        anos_amostra = [1995, 2000, 2005, 2010, 2015, 2020]
        print(f"üìÖ Usando anos padr√£o: {anos_amostra}")
    else:
        print(f"üìÖ Usando anos personalizados: {anos_amostra}")

        # Validar anos
        for ano in anos_amostra:
            if ano < 1979:
                raise ValueError(
                    f"Dados OLR dispon√≠veis apenas a partir de 1979. Ano {ano} inv√°lido."
                )
            if ano > 2024:
                print(f"‚ö†Ô∏è  Aviso: Ano {ano} pode n√£o ter dados completos")

    # ========================================================================
    # 3. INICIALIZAR FERRAMENTAS COM CONFIGURA√á√ÉO FLEX√çVEL
    # ========================================================================

    # Configurar carregador com cache espec√≠fico
    loader = NOAADataLoader(cache_dir=cache_dir)
    processor = DataProcessor()

    # Estrutura para armazenar resultados por m√™s
    resultados_mensais: dict[int, list[float]] = {mes: [] for mes in range(1, 13)}

    # ========================================================================
    # 4. PROCESSAR CADA ANO DA AMOSTRA USANDO LOAD_DATA_DUAL_SCALE
    # ========================================================================

    anos_processados = 0

    for ano in anos_amostra:
        print(f"üìÖ Processando {ano}...")

        try:
            # ‚úÖ USAR LOAD_DATA_DUAL_SCALE PARA M√ÅXIMA FLEXIBILIDADE
            dados_globais, dados_study_area = loader.load_data_dual_scale(
                start_date=f"{ano}-01-01",
                end_date=f"{ano}-12-31",
                study_area=study_area,  # ‚úÖ Flex√≠vel: None, tuple, str, GeoDataFrame
                auto_download=True,
                quality_control=True,
                remove_leap_days=True,
                return_study_area_subset=True,
                mask_to_shape=mask_to_shape,  # ‚úÖ Mascaramento opcional
            )

            # Usar dados da √°rea de estudo se dispon√≠vel, sen√£o usar globais
            dados = dados_study_area if dados_study_area is not None else dados_globais

            if dados is None:
                print(f"‚ö†Ô∏è  Sem dados para {ano}")
                continue

            # ====================================================================
            # 5. PROCESSAR CADA M√äS DO ANO
            # ====================================================================

            meses_processados = 0

            for mes in range(1, 13):
                try:
                    # Selecionar dados do m√™s
                    dados_mes = dados.sel(time=dados["time.month"] == mes)

                    if len(dados_mes.time) == 0:
                        continue

                    # Calcular m√©dia mensal
                    media_mes = dados_mes.olr.mean(dim="time")

                    # Encontrar posi√ß√µes da ZCIT usando o m√©todo column_minimum
                    coords = processor.find_minimum_coordinates(
                        media_mes, method="column_minimum"
                    )

                    if coords and len(coords) > 0:
                        # Calcular latitude m√©dia da ZCIT
                        latitudes = [c[1] for c in coords]  # c[1] √© a latitude
                        lat_media = np.mean(latitudes)

                        # Armazenar resultado
                        resultados_mensais[mes].append(lat_media)
                        meses_processados += 1

                except Exception as e_mes:
                    print(f"  ‚ùå Erro no m√™s {mes}: {e_mes}")
                    continue

            if meses_processados > 0:
                anos_processados += 1
                print(f"  ‚úÖ {meses_processados} meses processados")

                # Log adicional sobre o tipo de dados usado
                if dados_study_area is not None:
                    print(f"  üìè √Årea de estudo: {dados_study_area.sizes}")
                else:
                    print(f"  üìè Dados globais: {dados_globais.sizes}")
            else:
                print("  ‚ö†Ô∏è  Nenhum m√™s processado")

        except Exception as e_ano:
            print(f"‚ùå Erro no ano {ano}: {e_ano}")
            continue

    # ========================================================================
    # 6. CALCULAR CLIMATOLOGIA FINAL
    # ========================================================================

    print("\nüìä CALCULANDO CLIMATOLOGIA FINAL...")
    print(f"   Anos processados: {anos_processados}/{len(anos_amostra)}")

    climatologia_calculada: MonthlyClimatology = {}

    for mes in range(1, 13):
        if resultados_mensais[mes]:
            # Calcular m√©dia e arredondar para 1 casa decimal
            climatologia_calculada[mes] = round(np.mean(resultados_mensais[mes]), 1)
            print(
                f"   M√™s {mes:2d}: {len(resultados_mensais[mes])} anos, "
                f"m√©dia: {climatologia_calculada[mes]:+5.1f}¬∞N"
            )
        else:
            # Sem dados suficientes, usar valor neutro
            climatologia_calculada[mes] = 0.0
            print(f"   M√™s {mes:2d}: sem dados suficientes")

    # ========================================================================
    # 7. RELAT√ìRIO FINAL
    # ========================================================================

    print("\n‚úÖ CLIMATOLOGIA PERSONALIZADA CALCULADA:")
    print(f"   √Årea: {area_desc}")
    print(f"   Per√≠odo: {min(anos_amostra)}-{max(anos_amostra)}")
    print(f"   Anos v√°lidos: {anos_processados}")
    print(f"   Mascaramento: {'Ativo' if mask_to_shape else 'BBOX apenas'}")

    print("\nüìà POSI√á√ïES M√âDIAS DA ZCIT POR M√äS:")
    meses_nomes = [
        "",
        "Jan",
        "Fev",
        "Mar",
        "Abr",
        "Mai",
        "Jun",
        "Jul",
        "Ago",
        "Set",
        "Out",
        "Nov",
        "Dez",
    ]

    for mes in range(1, 13):
        pos = climatologia_calculada[mes]
        hemisferio = "N" if pos >= 0 else "S"
        print(f"   {meses_nomes[mes]}: {pos:+5.1f}¬∞{hemisferio}")

    return climatologia_calculada


def salvar_climatologia(
    climatologia: MonthlyClimatology,
    arquivo: str | Path = "climatologia_zcit.json",
    metadata_extra: dict | None = None,
) -> None:
    """
    Salva climatologia calculada em arquivo JSON com metadata completa.

    Parameters
    ----------
    climatologia : Dict[int, float]
        Climatologia a ser salva
    arquivo : str or Path, default="climatologia_zcit.json"
        Caminho do arquivo para salvar
    metadata_extra : Dict, optional
        Metadata adicional para incluir no arquivo

    Examples
    --------
    >>> clima = obter_climatologia_zcit_rapida()
    >>> salvar_climatologia(clima, "minha_climatologia.json")

    >>> # Com metadata extra
    >>> metadata = {"area": "Nordeste", "autor": "Jo√£o Silva"}
    >>> salvar_climatologia(clima, "clima_ne.json", metadata_extra=metadata)
    """
    dados_salvamento = {
        "metadata": {
            "criado_em": datetime.now().isoformat(),
            "versao": "1.0.0",
            "fonte": "LOCZCIT-IQR",
            "descricao": "Climatologia da ZCIT calculada com √°rea flex√≠vel",
            "unidade": "graus_latitude_norte",
            "num_meses": len(climatologia),
        },
        "climatologia": climatologia,
        "referencias": [
            "Waliser & Gautier (1993) - J. Climate",
            "Xie & Philander (1994) - J. Climate",
            "Ferreira et al. (2005) - Rev. Bras. Meteorologia",
            "Cavalcanti et al. (2009) - Tempo e Clima no Brasil",
        ],
    }

    # Adicionar metadata extra se fornecida
    if metadata_extra:
        dados_salvamento["metadata"].update(metadata_extra)

    # Adicionar estat√≠sticas da climatologia
    posicoes = list(climatologia.values())
    if posicoes:
        dados_salvamento["estatisticas"] = {
            "posicao_min": round(min(posicoes), 1),
            "posicao_max": round(max(posicoes), 1),
            "amplitude_anual": round(max(posicoes) - min(posicoes), 1),
            "media_anual": round(np.mean(posicoes), 1),
        }

    with open(arquivo, "w", encoding="utf-8") as f:
        json.dump(dados_salvamento, f, indent=2, ensure_ascii=False)

    print(f"‚úÖ Climatologia salva em: {arquivo}")
    if metadata_extra:
        print(f"üìã Metadata extra inclu√≠da: {list(metadata_extra.keys())}")


def carregar_climatologia(
    arquivo: str | Path = "climatologia_zcit.json",
) -> MonthlyClimatology:
    """
    Carrega climatologia de arquivo JSON.

    Parameters
    ----------
    arquivo : str or Path, default="climatologia_zcit.json"
        Caminho do arquivo para carregar

    Returns
    -------
    Dict[int, float]
        Climatologia carregada

    Raises
    ------
    FileNotFoundError
        Se o arquivo n√£o for encontrado
    ValueError
        Se o arquivo n√£o tiver formato v√°lido

    Examples
    --------
    >>> clima = carregar_climatologia("minha_climatologia.json")
    >>> print(f"ZCIT em julho: {clima[7]:.1f}¬∞N")
    """
    try:
        with open(arquivo, encoding="utf-8") as f:
            dados = json.load(f)

        # Validar estrutura
        if "climatologia" not in dados:
            raise ValueError("Arquivo n√£o cont√©m dados de climatologia v√°lidos")

        climatologia = dados["climatologia"]

        # Converter chaves para int (JSON salva como string)
        climatologia_int = {int(mes): valor for mes, valor in climatologia.items()}

        print(f"‚úÖ Climatologia carregada de: {arquivo}")
        if "metadata" in dados and "criado_em" in dados["metadata"]:
            print(f"üìÖ Criado em: {dados['metadata']['criado_em']}")
        if "estatisticas" in dados:
            stats = dados["estatisticas"]
            print(f"üìä Amplitude anual: {stats.get('amplitude_anual', 'N/A')}¬∞")

        return climatologia_int

    except FileNotFoundError:
        raise FileNotFoundError(f"Arquivo de climatologia n√£o encontrado: {arquivo}")
    except (json.JSONDecodeError, KeyError) as e:
        raise ValueError(f"Erro ao carregar climatologia: {e}")


# ============================================================================
# INTERFACE LIMPA PARA USU√ÅRIO FINAL - MANTIDA
# ============================================================================


@contextmanager
def _interface_limpa():
    """Context manager ULTRA-AGRESSIVO para suprimir logs verbosos."""

    # Lista de TODOS os loggers que podem aparecer
    loggers_para_silenciar = [
        "",
        "loczcit_iqr",
        "loczcit_iqr.core",
        "loczcit_iqr.core.processor",
        "loczcit_iqr.core.data_loader",
        "loczcit_iqr.core.climatologia",
    ]

    # Silenciar TODOS de forma agressiva
    for logger_name in loggers_para_silenciar:
        logger = logging.getLogger(logger_name)
        logger.setLevel(logging.CRITICAL)
        logger.disabled = True

    try:
        yield
    finally:
        # Restaurar (opcional)
        for logger_name in loggers_para_silenciar:
            logger = logging.getLogger(logger_name)
            logger.disabled = False
            logger.setLevel(logging.INFO)


def executar_analise_limpa(posicao_zcit, mes):
    """
    Wrapper para an√°lise climatol√≥gica com interface limpa e amig√°vel.

    Esta fun√ß√£o oferece uma experi√™ncia limpa ao usu√°rio, suprimindo logs
    verbosos e apresentando apenas os resultados importantes.

    Parameters
    ----------
    posicao_zcit : float
        Latitude da ZCIT encontrada (em graus)
    mes : int
        M√™s da an√°lise (1-12)

    Returns
    -------
    tuple
        (status, desvio, interpretacao) ou (None, None, None) em caso de erro

    Examples
    --------
    >>> # Analisar ZCIT encontrada em mar√ßo
    >>> status, desvio, interpretacao = executar_analise_limpa(-0.3, 3)
    >>> print(f"Status: {status}, Desvio: {desvio:.1f}¬∞")
    """

    print("üåä Executando an√°lise climatol√≥gica...")

    try:
        # Executar an√°lise com logs suprimidos
        with _interface_limpa():
            (
                status,
                desvio,
                interpretacao,
            ) = comparar_com_climatologia_cientifica(
                mes=mes,
                posicao_encontrada=posicao_zcit,
                usar_climatologia_calculada=False,  # Usar literatura (mais r√°pido)
            )

        # Apresentar resultados de forma limpa
        print("‚úÖ AN√ÅLISE CONCLU√çDA:")
        print(f"   üìç Posi√ß√£o analisada: {posicao_zcit:+.1f}¬∞N")
        print(f"   üå°Ô∏è Status: {status}")
        print(f"   üìè Desvio: {desvio:+.1f}¬∞")

        # Mostrar interpreta√ß√£o resumida
        if interpretacao:
            # Pegar apenas a primeira linha da interpreta√ß√£o (mais limpo)
            primeira_linha = (
                interpretacao.split("\n")[0] if "\n" in interpretacao else interpretacao
            )
            if len(primeira_linha) > 80:
                primeira_linha = primeira_linha[:77] + "..."
            print(f"   üìù {primeira_linha}")

        return status, desvio, interpretacao

    except Exception as e:
        print(f"‚ùå Erro na an√°lise climatol√≥gica: {e}")
        return None, None, None


def analise_zcit_rapida(posicao_zcit, mes, mostrar_detalhes=False):
    """
    Vers√£o ultra-simplificada para an√°lise r√°pida da ZCIT.

    Parameters
    ----------
    posicao_zcit : float
        Latitude da ZCIT encontrada
    mes : int
        M√™s da an√°lise (1-12)
    mostrar_detalhes : bool, default False
        Se True, mostra interpreta√ß√£o completa

    Returns
    -------
    str
        Status climatol√≥gico ('NORMAL', 'ANOMALIA_MODERADA', 'ANOMALIA_EXTREMA')

    Examples
    --------
    >>> status = analise_zcit_rapida(-0.3, 3)
    >>> print(f"ZCIT est√°: {status}")
    """

    # Emojis para status
    emojis = {"NORMAL": "‚úÖ", "ANOMALIA_MODERADA": "üü°", "ANOMALIA_EXTREMA": "üî¥"}

    try:
        with _interface_limpa():
            (
                status,
                desvio,
                interpretacao,
            ) = comparar_com_climatologia_cientifica(
                mes=mes, posicao_encontrada=posicao_zcit
            )

        emoji = emojis.get(status, "‚ùì")
        print(f"{emoji} ZCIT: {status} (desvio: {desvio:+.1f}¬∞)")

        if mostrar_detalhes and interpretacao:
            print(f"üìã Detalhes: {interpretacao}")

        return status

    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return "ERRO"


def configurar_experiencia_climatologia(nivel="simples"):
    """
    Configura o n√≠vel de detalhamento dos logs para an√°lise climatol√≥gica.

    Parameters
    ----------
    nivel : str
        'silencioso' - Apenas resultados
        'simples' - Resultados + avisos importantes
        'detalhado' - Informa√ß√µes de processamento
        'completo' - Todos os logs (debug)
    """

    niveis_config = {
        "silencioso": logging.CRITICAL,
        "simples": logging.ERROR,
        "detalhado": logging.WARNING,
        "completo": logging.DEBUG,
    }

    if nivel not in niveis_config:
        print(f"‚ö†Ô∏è N√≠vel '{nivel}' inv√°lido. Usando 'simples'.")
        nivel = "simples"

    logging.basicConfig(level=niveis_config[nivel], force=True)
    logging.getLogger("loczcit_iqr").setLevel(niveis_config[nivel])

    print(f"üîß Configura√ß√£o: n√≠vel '{nivel}' ativado")


# ============================================================================
# FUN√á√ïES DE CONVENI√äNCIA PARA USU√ÅRIOS FINAIS - MANTIDAS
# ============================================================================


def verificar_zcit_janeiro(posicao_zcit, mostrar_detalhes=False):
    """Verifica√ß√£o r√°pida espec√≠fica para janeiro."""
    print("üåßÔ∏è AN√ÅLISE PARA JANEIRO (Ver√£o no HS - √âPOCA DE CHUVAS):")
    return analise_zcit_rapida(posicao_zcit, mes=1, mostrar_detalhes=mostrar_detalhes)


def verificar_zcit_fevereiro(posicao_zcit, mostrar_detalhes=False):
    """Verifica√ß√£o r√°pida espec√≠fica para fevereiro."""
    print("üåßÔ∏è AN√ÅLISE PARA FEVEREIRO (Ver√£o no HS - PICO DAS CHUVAS):")
    return analise_zcit_rapida(posicao_zcit, mes=2, mostrar_detalhes=mostrar_detalhes)


def verificar_zcit_marco(posicao_zcit, mostrar_detalhes=False):
    """Verifica√ß√£o r√°pida espec√≠fica para mar√ßo."""
    print("üçÇ AN√ÅLISE PARA MAR√áO (Outono no HS - FINAL DAS CHUVAS):")
    return analise_zcit_rapida(posicao_zcit, mes=3, mostrar_detalhes=mostrar_detalhes)


def verificar_zcit_abril(posicao_zcit, mostrar_detalhes=False):
    """Verifica√ß√£o r√°pida espec√≠fica para abril."""
    print("üçÇ AN√ÅLISE PARA ABRIL (Outono no HS - PER√çODO DE TRANSI√á√ÉO):")
    return analise_zcit_rapida(posicao_zcit, mes=4, mostrar_detalhes=mostrar_detalhes)


def verificar_zcit_maio(posicao_zcit, mostrar_detalhes=False):
    """Verifica√ß√£o r√°pida espec√≠fica para maio."""
    print("üçÇ AN√ÅLISE PARA MAIO (Outono no HS - TRANSI√á√ÉO PARA A SECA):")
    return analise_zcit_rapida(posicao_zcit, mes=5, mostrar_detalhes=mostrar_detalhes)


def verificar_zcit_junho(posicao_zcit, mostrar_detalhes=False):
    """Verifica√ß√£o r√°pida espec√≠fica para junho."""
    print("‚òÄÔ∏è AN√ÅLISE PARA JUNHO (Inverno no HS - IN√çCIO DA √âPOCA SECA):")
    return analise_zcit_rapida(posicao_zcit, mes=6, mostrar_detalhes=mostrar_detalhes)


def verificar_zcit_julho(posicao_zcit, mostrar_detalhes=False):
    """Verifica√ß√£o r√°pida espec√≠fica para julho."""
    print("‚òÄÔ∏è AN√ÅLISE PARA JULHO (Inverno no HS - PICO DA √âPOCA SECA):")
    return analise_zcit_rapida(posicao_zcit, mes=7, mostrar_detalhes=mostrar_detalhes)


def verificar_zcit_agosto(posicao_zcit, mostrar_detalhes=False):
    """Verifica√ß√£o r√°pida espec√≠fica para agosto."""
    print("‚òÄÔ∏è AN√ÅLISE PARA AGOSTO (Inverno no HS - FINAL DA √âPOCA SECA):")
    return analise_zcit_rapida(posicao_zcit, mes=8, mostrar_detalhes=mostrar_detalhes)


def verificar_zcit_setembro(posicao_zcit, mostrar_detalhes=False):
    """Verifica√ß√£o r√°pida espec√≠fica para setembro."""
    print("üçÇ AN√ÅLISE PARA SETEMBRO (Primavera no HS - PER√çODO DE TRANSI√á√ÉO):")
    return analise_zcit_rapida(posicao_zcit, mes=9, mostrar_detalhes=mostrar_detalhes)


def verificar_zcit_outubro(posicao_zcit, mostrar_detalhes=False):
    """Verifica√ß√£o r√°pida espec√≠fica para outubro."""
    print("üçÇ AN√ÅLISE PARA OUTUBRO (Primavera no HS - IN√çCIO DAS CHUVAS):")
    return analise_zcit_rapida(posicao_zcit, mes=10, mostrar_detalhes=mostrar_detalhes)


def verificar_zcit_novembro(posicao_zcit, mostrar_detalhes=False):
    """Verifica√ß√£o r√°pida espec√≠fica para novembro."""
    print("üåßÔ∏è AN√ÅLISE PARA NOVEMBRO (Primavera no HS - √âPOCA DE CHUVAS):")
    return analise_zcit_rapida(posicao_zcit, mes=11, mostrar_detalhes=mostrar_detalhes)


def verificar_zcit_dezembro(posicao_zcit, mostrar_detalhes=False):
    """Verifica√ß√£o r√°pida espec√≠fica para dezembro."""
    print("üåßÔ∏è AN√ÅLISE PARA DEZEMBRO (Ver√£o no HS - √âPOCA DE CHUVAS):")
    return analise_zcit_rapida(posicao_zcit, mes=12, mostrar_detalhes=mostrar_detalhes)


# ============================================================================
# SISTEMA AVAN√áADO DE CLIMATOLOGIAS TEMPORAIS
# ============================================================================


def executar_climatologias_completas_zcit(
    study_area: StudyAreaType = None,
    anos: list[int] | None = None,
    diretorio_saida: str | Path = "./climatologias_personalizadas",
    mask_to_shape: bool = True,
    prefixo_arquivo: str = "clima_regiao_norte",
    incluir_metadata: bool = True,
) -> tuple[dict[str, str], dict[str, Any]] | None:
    """
    Executa a cria√ß√£o completa das climatologias da ZCIT.

    ANALOGIA DO DIRETOR DE ORQUESTRA CLIM√ÅTICA üéº
    Como um maestro que coordena diferentes instrumentos (dados) e m√∫sicos (anos)
    para criar uma sinfonia harmoniosa (climatologia), esta fun√ß√£o rege todo
    o processo de c√°lculo usando a √°rea de estudo mais adequada.

    Parameters
    ----------
    study_area : StudyAreaType, optional
        √Årea de estudo flex√≠vel. Padr√£o: None (usa √°rea padr√£o ZCIT).
    anos : List[int], optional
        Lista de anos. Padr√£o: [2015-2020].
    diretorio_saida : str or Path, optional
        Diret√≥rio para salvar os arquivos.
    mask_to_shape : bool, optional
        Se True, mascara para a forma exata da geometria.
    prefixo_arquivo : str, optional
        Prefixo para os nomes dos arquivos de sa√≠da.
    incluir_metadata : bool, optional
        Se True, inclui metadados detalhados nos arquivos.

    Returns
    -------
    Tuple[Dict[str, str], Dict[str, Any]] or None
        Tupla com (arquivos_gerados, resultados_analise) ou (None, None) em caso de erro.
    """
    print("üåä INICIANDO CRIA√á√ÉO DE CLIMATOLOGIAS COMPLETAS DA ZCIT")
    print("=" * 70)

    # Use os argumentos da fun√ß√£o ou valores padr√£o
    anos_analise = anos if anos is not None else list(range(2015, 2021))

    print(f"üìÖ Per√≠odo: {min(anos_analise)}-{max(anos_analise)}")
    print(f"üìÅ Sa√≠da: {diretorio_saida}")

    try:
        print("\n‚è∞ CRIANDO CLIMATOLOGIAS TEMPORAIS COMPLETAS...")
        # A fun√ß√£o que n√£o existia, 'criar_climatologias_completas', foi mesclada aqui.
        # Esta fun√ß√£o agora faz o trabalho completo.

        # 1. VALIDA√á√ÉO E CONFIGURA√á√ÉO
        diretorio_saida = Path(diretorio_saida)
        diretorio_saida.mkdir(parents=True, exist_ok=True)
        area_id = _gerar_identificador_area(study_area)

        # 2. INICIALIZA√á√ÉO
        loader = NOAADataLoader(cache_dir=diretorio_saida / ".cache")
        processor = DataProcessor()
        dados_diarios, dados_mensais, dados_pentadas = (
            [],
            {m: [] for m in range(1, 13)},
            {p: [] for p in range(1, 74)},
        )

        # 3. PROCESSAMENTO DOS ANOS
        for ano in anos_analise:
            print(f"üîÑ Processando ano {ano}...")
            dados_globais, dados_study_area = loader.load_data_dual_scale(
                start_date=f"{ano}-01-01",
                end_date=f"{ano}-12-31",
                study_area=study_area,
                auto_download=True,
                quality_control=True,
                remove_leap_days=True,
                return_study_area_subset=True,
                mask_to_shape=mask_to_shape,
            )
            dados = dados_study_area if dados_study_area is not None else dados_globais
            if dados is None:
                continue
            _processar_dados_temporais(
                dados,
                ano,
                processor,
                dados_diarios,
                dados_mensais,
                dados_pentadas,
            )

        # 4. C√ÅLCULO DAS CLIMATOLOGIAS
        print("\nüßÆ Calculando climatologias finais...")
        clima_mensal = _calcular_climatologia_mensal(dados_mensais)
        clima_diaria = _calcular_climatologia_diaria(dados_diarios)
        clima_pentadas = _calcular_climatologia_pentadas(dados_pentadas)

        # 5. SALVAR ARQUIVOS
        print("üíæ Salvando arquivos de climatologia...")
        arquivos_gerados = {
            "mensal": _salvar_climatologia_temporal(
                clima_mensal,
                "mensal",
                diretorio_saida,
                prefixo_arquivo,
                area_id,
                anos_analise,
                study_area,
                incluir_metadata,
            ),
            "diaria": _salvar_climatologia_temporal(
                clima_diaria,
                "diaria",
                diretorio_saida,
                prefixo_arquivo,
                area_id,
                anos_analise,
                study_area,
                incluir_metadata,
            ),
            "pentadas": _salvar_climatologia_temporal(
                clima_pentadas,
                "pentadas",
                diretorio_saida,
                prefixo_arquivo,
                area_id,
                anos_analise,
                study_area,
                incluir_metadata,
            ),
        }

        print("\n‚úÖ Processo conclu√≠do!")

        # Opcional: An√°lise dos resultados (mantida da sua fun√ß√£o original)
        resultados_analise = {}
        for tipo, arquivo in arquivos_gerados.items():
            try:
                resultados_analise[tipo] = analisar_climatologia_temporal(arquivo)
            except Exception as e:
                print(f"   ‚ùå Erro na an√°lise do arquivo {tipo}: {e}")
                resultados_analise[tipo] = None

        return arquivos_gerados, resultados_analise

    except Exception as e:
        print(f"\n‚ùå ERRO GERAL DURANTE A EXECU√á√ÉO: {e}")
        return None, None


def demonstrar_uso_climatologias_especificas():
    """
    Demonstra o uso das fun√ß√µes espec√≠ficas para diferentes escalas temporais.

    ANALOGIA DO CHEF ESPECIALIZADO üë®‚Äçüç≥
    Como um chef que pode preparar pratos espec√≠ficos quando o cliente
    quer apenas uma especialidade da casa.
    """

    print("\nüçΩÔ∏è  DEMONSTRA√á√ÉO: CLIMATOLOGIAS ESPEC√çFICAS")
    print("=" * 60)

    anos_exemplo = [2018, 2019, 2020]  # √öltimos 3 anos como exemplo

    # ========================================================================
    # CLIMATOLOGIA MENSAL R√ÅPIDA
    # ========================================================================

    print("\nüìÖ 1. CLIMATOLOGIA MENSAL R√ÅPIDA:")
    print("   üéØ Ideal para: An√°lises sazonais e planejamento geral")
    print("   ‚ö° Vantagem: Processamento r√°pido, foco no essencial")

    try:
        climatologia_mensal, arquivo_mensal = criar_climatologia_mensal_rapida(
            study_area=None,  # √Årea padr√£o
            anos=anos_exemplo,
            arquivo_saida="./exemplo_mensal.json",
        )

        print(f"   ‚úÖ Criada com sucesso: {len(climatologia_mensal)} meses")
        print(f"   üìÑ Arquivo: {Path(arquivo_mensal).name}")

        # Mostrar algumas posi√ß√µes
        print("   üóìÔ∏è  Exemplos:")
        for mes in [1, 4, 7, 10]:  # Jan, Abr, Jul, Out
            meses_nomes = {1: "Jan", 4: "Abr", 7: "Jul", 10: "Out"}
            pos = climatologia_mensal[mes]
            print(f"      {meses_nomes[mes]}: {pos:+5.1f}¬∞N")

    except Exception as e:
        print(f"   ‚ùå Erro: {e}")

    # ========================================================================
    # CLIMATOLOGIA DI√ÅRIA DETALHADA
    # ========================================================================

    print("\nüìÖ 2. CLIMATOLOGIA DI√ÅRIA DETALHADA:")
    print("   üéØ Ideal para: Estudos precisos e opera√ß√µes di√°rias")
    print("   üî¨ Vantagem: Resolu√ß√£o temporal m√°xima (365 dias)")

    try:
        (
            climatologia_diaria,
            arquivo_diario,
        ) = criar_climatologia_diaria_detalhada(
            study_area=None,  # √Årea padr√£o
            anos=anos_exemplo,
            suavizar=True,  # Aplicar suaviza√ß√£o para reduzir ru√≠do
            arquivo_saida="./exemplo_diario.json",
        )

        print(f"   ‚úÖ Criada com sucesso: {len(climatologia_diaria)} dias")
        print(f"   üìÑ Arquivo: {Path(arquivo_diario).name}")
        print("   üîß Suaviza√ß√£o aplicada para reduzir ru√≠do di√°rio")

        # Mostrar alguns dias representativos
        print("   üóìÔ∏è  Exemplos (dias do ano):")
        dias_exemplo = [1, 100, 200, 300]  # In√≠cio, meio do ano, etc.
        for dia in dias_exemplo:
            if dia in climatologia_diaria:
                pos = climatologia_diaria[dia]
                print(f"      Dia {dia:3d}: {pos:+5.1f}¬∞N")

    except Exception as e:
        print(f"   ‚ùå Erro: {e}")

    # ========================================================================
    # CLIMATOLOGIA POR PENTADAS
    # ========================================================================

    print("\nüìÖ 3. CLIMATOLOGIA PENTADAL OPERACIONAL:")
    print("   üéØ Ideal para: Previs√µes de 5 dias e an√°lises operacionais")
    print("   ‚öñÔ∏è  Vantagem: Equil√≠brio entre resolu√ß√£o e estabilidade")

    try:
        (
            climatologia_pentadas,
            arquivo_pentadas,
        ) = criar_climatologia_pentadas_operacional(
            study_area=None,  # √Årea padr√£o
            anos=anos_exemplo,
            arquivo_saida="./exemplo_pentadas.json",
        )

        print(f"   ‚úÖ Criada com sucesso: {len(climatologia_pentadas)} pentadas")
        print(f"   üìÑ Arquivo: {Path(arquivo_pentadas).name}")

        # Mostrar algumas pentadas representativas
        print("   üóìÔ∏è  Exemplos (pentadas):")
        pentadas_exemplo = [10, 25, 40, 55]  # Diferentes √©pocas do ano
        for pentada in pentadas_exemplo:
            if pentada in climatologia_pentadas:
                pos = climatologia_pentadas[pentada]
                print(f"      Pentada {pentada:2d}: {pos:+5.1f}¬∞N")

    except Exception as e:
        print(f"   ‚ùå Erro: {e}")

    print("\nüí° DICA IMPORTANTE:")
    print("   üìä Cada escala temporal tem sua aplica√ß√£o espec√≠fica")
    print("   ‚ö° Use a escala que melhor atende seu objetivo")
    print("   üîÑ Combine diferentes escalas para an√°lises completas")


def interpretar_resultados_climatologicos():
    """
    Fornece interpreta√ß√£o cient√≠fica dos resultados climatol√≥gicos.

    ANALOGIA DO TRADUTOR CIENT√çFICO üî¨
    Como um tradutor que converte n√∫meros em linguagem compreens√≠vel,
    explicando o significado real dos padr√µes encontrados.
    """

    print("\nüî¨ INTERPRETA√á√ÉO CIENT√çFICA DOS RESULTADOS")
    print("=" * 60)

    print("\nüåä COMPREENDENDO A ZCIT:")
    print("   üìç A ZCIT √© uma 'faixa de chuvas' que migra sazonalmente")
    print("   üåç Fundamental para o clima do Norte/Nordeste do Brasil")
    print("   ‚öñÔ∏è  Posi√ß√£o determina se h√° seca ou chuva na regi√£o")

    print("\nüìä INTERPRETANDO OS VALORES:")
    print("   üß≠ Valores POSITIVOS (+): ZCIT ao NORTE do equador")
    print("   üß≠ Valores NEGATIVOS (-): ZCIT ao SUL do equador")
    print("   üìè Amplitude t√≠pica: 10-15¬∞ de migra√ß√£o anual")

    print("\nüóìÔ∏è  PADR√ÉO SAZONAL T√çPICO:")
    print("   üåßÔ∏è  FEV-MAI: ZCIT mais ao SUL ‚Üí CHUVAS no N/NE Brasil")
    print("   ‚òÄÔ∏è  JUL-SET: ZCIT mais ao NORTE ‚Üí SECA no N/NE Brasil")
    print("   üîÑ MAR-ABR: Posi√ß√£o mais meridional (mais chuvas)")
    print("   üîÑ AGO-SET: Posi√ß√£o mais setentrional (mais seca)")

    print("\nüö® ANOMALIAS IMPORTANTES:")
    print("   üî¥ ZCIT muito ao SUL em √©poca seca ‚Üí Chuvas fora de √©poca")
    print("   üî¥ ZCIT muito ao NORTE em √©poca chuvosa ‚Üí Seca severa")
    print("   üü° Desvios > 2¬∞ s√£o considerados an√¥malos")
    print("   üü¢ Varia√ß√µes < 1¬∞ s√£o normais")

    print("\nüìà USANDO AS DIFERENTES ESCALAS:")
    print("   üìÖ MENSAL: Planejamento agr√≠cola e recursos h√≠dricos")
    print("   üìÖ DI√ÅRIA: Previs√£o meteorol√≥gica de curto prazo")
    print("   üìÖ PENTADAL: Previs√µes operacionais de 5 dias")

    print("\nüå°Ô∏è  IMPACTOS CLIM√ÅTICOS:")
    print("   üíß Agricultura: Determina per√≠odo de plantio/colheita")
    print("   üèûÔ∏è  Recursos h√≠dricos: Afeta reservat√≥rios e rios")
    print("   üåæ Pecu√°ria: Influencia disponibilidade de pastagens")
    print("   üèòÔ∏è  Popula√ß√£o: Impacta abastecimento de √°gua urbano")

    print("\nüìö REFER√äNCIAS CIENT√çFICAS:")
    print("   ‚Ä¢ Uvo (1989): Migra√ß√£o sazonal da ZCIT")
    print("   ‚Ä¢ Cavalcanti et al. (2009): Impactos no Brasil")
    print("   ‚Ä¢ Xie & Philander (1994): Din√¢mica no Atl√¢ntico")
    print("   ‚Ä¢ Hastenrath & Kutzbach (1985): Variabilidade")


def _gerar_identificador_area(study_area: StudyAreaType) -> str:
    """
    Gera identificador √∫nico para a √°rea de estudo.

    ANALOGIA DO CART√ìGRAFO üó∫Ô∏è
    Como um cart√≥grafo que cria c√≥digos √∫nicos para cada mapa,
    esta fun√ß√£o gera "c√≥digos postais clim√°ticos" para cada √°rea.
    """
    if study_area is None:
        return "area_padrao"
    if isinstance(study_area, tuple) and len(study_area) == 4:
        lat_min, lat_max, lon_min, lon_max = study_area
        return f"bbox_{abs(lat_min):.0f}S{abs(lat_max):.0f}N_{abs(lon_min):.0f}W{abs(lon_max):.0f}E"
    if isinstance(study_area, str):
        # Usar nome do arquivo sem extens√£o
        return f"arquivo_{Path(study_area).stem}"
    if HAS_GEOPANDAS and isinstance(study_area, gpd.GeoDataFrame):
        # Usar hash do GeoDataFrame para identificador √∫nico
        return f"geodf_{len(study_area)}geom"
    return "area_customizada"


def _processar_dados_temporais(
    dados: xr.Dataset,
    ano: int,
    processor: DataProcessor,
    dados_diarios: list,
    dados_mensais: dict,
    dados_pentadas: dict,
) -> int:
    """
    Processa dados de um ano para todas as escalas temporais.

    ANALOGIA DO RELOJOEIRO ‚ö∞Ô∏è
    Como um relojoeiro que calibra diferentes escalas de tempo
    em um rel√≥gio complexo, esta fun√ß√£o organiza os dados clim√°ticos
    em diferentes "engrenagens temporais".
    """
    dias_processados = 0

    for dia_idx, tempo in enumerate(dados.time):
        try:
            # Extrair data
            # ========================================================= #
            # ##                  IN√çCIO DA CORRE√á√ÉO                 ## #
            # ========================================================= #

            # Use .item() para extrair o valor escalar do array numpy
            data = pd.to_datetime(tempo.values.item())

            # ========================================================= #
            # ##                   FIM DA CORRE√á√ÉO                   ## #
            # ========================================================= #

            dia_ano = data.timetuple().tm_yday  # Dia do ano (1-365)
            mes = data.month

            # Calcular pentada (per√≠odo de 5 dias)
            pentada = ((dia_ano - 1) // 5) + 1
            pentada = min(pentada, 73)  # M√°ximo 73 pentadas

            # Selecionar dados do dia
            dados_dia = dados.isel(time=dia_idx)
            media_dia = dados_dia.olr

            # Encontrar posi√ß√µes da ZCIT
            coords_zcit = processor.find_minimum_coordinates(
                media_dia, method="column_minimum"
            )

            if coords_zcit:
                # Calcular latitude m√©dia da ZCIT
                lats_zcit = [coord[1] for coord in coords_zcit]
                lat_media = np.mean(lats_zcit)

                # Armazenar para climatologia di√°ria
                dados_diarios.append(
                    {
                        "ano": ano,
                        "dia_ano": dia_ano,
                        "data": data,
                        "mes": mes,
                        "pentada": pentada,
                        "posicao_lat": lat_media,
                        "num_pontos": len(coords_zcit),
                        "olr_medio": float(media_dia.mean()),
                    }
                )

                # Armazenar para climatologia mensal
                dados_mensais[mes].append(lat_media)

                # Armazenar para climatologia por pentadas
                dados_pentadas[pentada].append(lat_media)

                dias_processados += 1

        except Exception as e:
            print(f"‚ö†Ô∏è  Erro no dia {data.day}/{data.month}/{ano}: {e}")
            continue

    return dias_processados


def _calcular_climatologia_mensal(dados_mensais: dict) -> dict[int, float]:
    """
    Calcula climatologia mensal com remo√ß√£o de outliers.

    ANALOGIA DO ESTAT√çSTICO SAZONAL üìä
    Como um estat√≠stico que analisa padr√µes sazonais,
    calculando "m√©dias representativas" para cada m√™s.
    """
    climatologia = {}

    for mes in range(1, 13):
        if dados_mensais[mes]:
            valores = np.array(dados_mensais[mes])

            # Remover outliers (> 3 desvios padr√£o)
            media = np.mean(valores)
            desvio = np.std(valores)
            valores_limpos = valores[np.abs(valores - media) <= 3 * desvio]

            if len(valores_limpos) > 0:
                climatologia[mes] = round(np.mean(valores_limpos), 1)
            else:
                climatologia[mes] = round(media, 1)
        else:
            climatologia[mes] = 0.0

    return climatologia


def _calcular_climatologia_diaria(dados_diarios: list) -> dict[int, float]:
    """
    Calcula climatologia para cada dia do ano (1-365).

    ANALOGIA DO CRONISTA DI√ÅRIO üìù
    Como um cronista que registra eventos dia a dia,
    calculando "padr√µes t√≠picos" para cada data do calend√°rio.
    """
    # Organizar dados por dia do ano
    dados_por_dia = {dia: [] for dia in range(1, 366)}

    for registro in dados_diarios:
        dia_ano = registro["dia_ano"]
        dados_por_dia[dia_ano].append(registro["posicao_lat"])

    # Calcular climatologia
    climatologia = {}

    for dia_ano in range(1, 366):
        if dados_por_dia[dia_ano]:
            valores = np.array(dados_por_dia[dia_ano])

            # Aplicar suaviza√ß√£o com janela m√≥vel de 7 dias para reduzir ru√≠do
            # (opcional - pode ser removido se preferir dados mais "crus")
            climatologia[dia_ano] = round(np.mean(valores), 1)
        else:
            # Interpolar usando dias vizinhos se n√£o houver dados
            climatologia[dia_ano] = _interpolar_dia_faltante(climatologia, dia_ano)

    return climatologia


def _calcular_climatologia_pentadas(dados_pentadas: dict) -> dict[int, float]:
    """
    Calcula climatologia para cada pentada (per√≠odo de 5 dias).

    ANALOGIA DO METEOROLOGISTA OPERACIONAL üå™Ô∏è
    Como um meteorologista que faz previs√µes de 5 dias,
    esta fun√ß√£o calcula "padr√µes t√≠picos" para per√≠odos pentadais.
    """
    climatologia = {}

    for pentada in range(1, 74):  # 73 pentadas por ano
        if dados_pentadas[pentada]:
            valores = np.array(dados_pentadas[pentada])

            # Remover outliers
            media = np.mean(valores)
            desvio = np.std(valores)
            valores_limpos = valores[np.abs(valores - media) <= 3 * desvio]

            if len(valores_limpos) > 0:
                climatologia[pentada] = round(np.mean(valores_limpos), 1)
            else:
                climatologia[pentada] = round(media, 1)
        else:
            climatologia[pentada] = 0.0

    return climatologia


def _interpolar_dia_faltante(climatologia: dict, dia_faltante: int) -> float:
    """
    Interpola valor para dia sem dados usando dias vizinhos.

    ANALOGIA DO DETETIVE CLIM√ÅTICO üîç
    Como um detetive que preenche lacunas usando pistas vizinhas,
    esta fun√ß√£o "deduz" valores ausentes usando padr√µes pr√≥ximos.
    """
    # Buscar dias vizinhos com dados
    janela = 7  # Buscar at√© 7 dias antes e depois

    valores_vizinhos = []

    for offset in range(1, janela + 1):
        # Dia anterior
        dia_ant = dia_faltante - offset
        if dia_ant >= 1 and dia_ant in climatologia:
            valores_vizinhos.append(climatologia[dia_ant])

        # Dia posterior
        dia_post = dia_faltante + offset
        if dia_post <= 365 and dia_post in climatologia:
            valores_vizinhos.append(climatologia[dia_post])

        # Se j√° temos dados suficientes, parar
        if len(valores_vizinhos) >= 4:
            break

    if valores_vizinhos:
        return round(np.mean(valores_vizinhos), 1)
    return 0.0  # Fallback se n√£o houver dados vizinhos


def _salvar_climatologia_temporal(
    climatologia: dict,
    tipo: str,
    diretorio: Path,
    prefixo: str,
    area_id: str,
    anos: list[int],
    study_area: StudyAreaType,
    incluir_metadata: bool,
) -> Path:
    """
    Salva climatologia temporal em arquivo JSON padronizado.

    ANALOGIA DO ARQUIVISTA DIGITAL üìö
    Como um arquivista que organiza documentos com c√≥digos √∫nicos,
    esta fun√ß√£o cria "fichas catalogr√°ficas" para cada climatologia.
    """
    # Gerar nome do arquivo padronizado
    ano_inicio = min(anos)
    ano_fim = max(anos)
    timestamp = datetime.now().strftime("%Y%m%d")

    nome_arquivo = f"{prefixo}_{tipo}_{area_id}_{ano_inicio}-{ano_fim}_{timestamp}.json"
    caminho_arquivo = diretorio / nome_arquivo

    # Preparar dados para salvamento
    dados_salvamento = {
        "climatologia": climatologia,
        "info": {
            "tipo": tipo,
            "num_periodos": len(climatologia),
            "area_id": area_id,
            "periodo": f"{ano_inicio}-{ano_fim}",
            "anos_utilizados": anos,
            "criado_em": datetime.now().isoformat(),
        },
    }

    # Adicionar metadata detalhada se solicitado
    if incluir_metadata:
        dados_salvamento["metadata"] = {
            "versao": "1.0.0",
            "fonte": "LOCZCIT-IQR",
            "descricao": f"Climatologia {tipo} da ZCIT",
            "unidade": "graus_latitude_norte",
            "metodo": "column_minimum",
            "referencias": [
                "Waliser & Gautier (1993) - J. Climate",
                "Xie & Philander (1994) - J. Climate",
                "Ferreira et al. (2005) - Rev. Bras. Meteorologia",
            ],
        }

        # Adicionar informa√ß√µes espec√≠ficas da √°rea
        dados_salvamento["area_estudo"] = _obter_info_area(study_area)

        # Adicionar estat√≠sticas da climatologia
        valores = list(climatologia.values())
        if valores:
            dados_salvamento["estatisticas"] = {
                "posicao_min": round(min(valores), 1),
                "posicao_max": round(max(valores), 1),
                "amplitude": round(max(valores) - min(valores), 1),
                "media_geral": round(np.mean(valores), 1),
                "desvio_padrao": round(np.std(valores), 1),
            }

    # Salvar arquivo
    with open(caminho_arquivo, "w", encoding="utf-8") as f:
        json.dump(dados_salvamento, f, indent=2, ensure_ascii=False)

    print(f"   üíæ {tipo.capitalize()}: {nome_arquivo}")

    return caminho_arquivo


def _obter_info_area(study_area: StudyAreaType) -> dict:
    """
    Obt√©m informa√ß√µes detalhadas sobre a √°rea de estudo.

    ANALOGIA DO GE√ìGRAFO üåç
    Como um ge√≥grafo que cataloga caracter√≠sticas de territ√≥rios,
    esta fun√ß√£o cria um "passaporte" para cada √°rea de estudo.
    """
    if study_area is None:
        return {
            "tipo": "area_padrao",
            "descricao": "Geometria padr√£o interna (Area_LOCZCIT.parquet)",
            "coordenadas": "Vari√°vel conforme geometria padr√£o",
        }
    if isinstance(study_area, tuple) and len(study_area) == 4:
        lat_min, lat_max, lon_min, lon_max = study_area
        return {
            "tipo": "bbox",
            "descricao": "Bounding box personalizado",
            "coordenadas": {
                "lat_min": lat_min,
                "lat_max": lat_max,
                "lon_min": lon_min,
                "lon_max": lon_max,
            },
            "area_graus": (lat_max - lat_min) * (lon_max - lon_min),
        }
    if isinstance(study_area, str):
        return {
            "tipo": "arquivo_geometria",
            "descricao": f"Arquivo: {Path(study_area).name}",
            "caminho": str(study_area),
            "extensao": Path(study_area).suffix,
        }
    if HAS_GEOPANDAS and isinstance(study_area, gpd.GeoDataFrame):
        try:
            bounds = study_area.total_bounds
            return {
                "tipo": "geodataframe",
                "descricao": f"GeoDataFrame com {len(study_area)} geometrias",
                "num_geometrias": len(study_area),
                "crs": str(study_area.crs) if study_area.crs else "N√£o definido",
                "bounds": {
                    "lon_min": float(bounds[0]),
                    "lat_min": float(bounds[1]),
                    "lon_max": float(bounds[2]),
                    "lat_max": float(bounds[3]),
                },
            }
        except Exception:
            return {
                "tipo": "geodataframe",
                "descricao": f"GeoDataFrame com {len(study_area)} geometrias",
                "num_geometrias": len(study_area),
                "erro": "N√£o foi poss√≠vel extrair bounds",
            }
    else:
        return {
            "tipo": "desconhecido",
            "descricao": "Tipo de √°rea n√£o reconhecido",
            "valor": str(type(study_area)),
        }


# ============================================================================
# FUN√á√ïES DE CONVENI√äNCIA PARA CLIMATOLOGIAS ESPEC√çFICAS
# ============================================================================


def criar_climatologias_completas(
    study_area: StudyAreaType = None,
    anos: list[int] | None = None,
    diretorio_saida: str | Path = "./climatologias_personalizadas",
    mask_to_shape: bool = True,
    prefixo_arquivo: str = "clima_regiao_norte",
    incluir_metadata: bool = True,
) -> dict:
    """
    Fun√ß√£o auxiliar para criar climatologias completas (mensal, di√°ria, pentadal) e retornar os caminhos dos arquivos.
    """
    arquivos_gerados, _ = executar_climatologias_completas_zcit(
        study_area=study_area,
        anos=anos,
        diretorio_saida=diretorio_saida,
        mask_to_shape=mask_to_shape,
        prefixo_arquivo=prefixo_arquivo,
        incluir_metadata=incluir_metadata,
    )
    if arquivos_gerados is None:
        raise RuntimeError("Falha ao criar climatologias completas.")
    return arquivos_gerados


def criar_climatologia_mensal_rapida(
    study_area: StudyAreaType = None,
    anos: list[int] | None = None,
    arquivo_saida: str | Path | None = None,
) -> tuple[dict[int, float], str]:
    """
    Cria apenas climatologia mensal (mais r√°pida).

    ANALOGIA DO CHEF EXECUTIVO üë®‚Äçüç≥
    Como um chef que prepara apenas o prato principal quando
    o tempo √© limitado, esta fun√ß√£o foca na climatologia essencial.

    Parameters
    ----------
    study_area : StudyAreaType, optional
        √Årea de estudo flex√≠vel
    anos : List[int], optional
        Anos para calcular climatologia
    arquivo_saida : str or Path, optional
        Caminho espec√≠fico para salvar (se None, gera automaticamente)

    Returns
    -------
    Tuple[Dict[int, float], str]
        Climatologia mensal e caminho do arquivo salvo
    """

    print("üìÖ CRIANDO CLIMATOLOGIA MENSAL R√ÅPIDA...")

    # Usar fun√ß√£o completa mas extrair apenas a parte mensal
    arquivos = criar_climatologias_completas(
        study_area=study_area,
        anos=anos,
        diretorio_saida="./clima_temp"
        if arquivo_saida is None
        else Path(arquivo_saida).parent,
        prefixo_arquivo="clima_mensal_rapido",
    )

    # Carregar climatologia mensal
    climatologia = carregar_climatologia(arquivos["mensal"])

    # Mover arquivo se caminho espec√≠fico foi fornecido
    if arquivo_saida is not None:
        arquivo_final = Path(arquivo_saida)
        arquivo_final.parent.mkdir(parents=True, exist_ok=True)
        Path(arquivos["mensal"]).rename(arquivo_final)
        print(f"üìÅ Arquivo movido para: {arquivo_final}")
        return climatologia, str(arquivo_final)

    return climatologia, arquivos["mensal"]


def criar_climatologia_diaria_detalhada(
    study_area: StudyAreaType = None,
    anos: list[int] | None = None,
    suavizar: bool = True,
    arquivo_saida: str | Path | None = None,
) -> tuple[dict[int, float], str]:
    """
    Cria climatologia di√°ria detalhada (365 dias).

    ANALOGIA DO METEOROLOGISTA DE PRECIS√ÉO üéØ
    Como um meteorologista que analisa cada dia do ano com
    precis√£o cir√∫rgica, esta fun√ß√£o cria previs√µes dia a dia.

    Parameters
    ----------
    study_area : StudyAreaType, optional
        √Årea de estudo flex√≠vel
    anos : List[int], optional
        Anos para calcular climatologia
    suavizar : bool, default=True
        Se True, aplica suaviza√ß√£o para reduzir ru√≠do di√°rio
    arquivo_saida : str or Path, optional
        Caminho espec√≠fico para salvar

    Returns
    -------
    Tuple[Dict[int, float], str]
        Climatologia di√°ria e caminho do arquivo salvo
    """

    print("üìÖ CRIANDO CLIMATOLOGIA DI√ÅRIA DETALHADA...")
    print(f"üîß Suaviza√ß√£o: {'Ativa' if suavizar else 'Desativada'}")

    # Criar climatologias completas
    arquivos = criar_climatologias_completas(
        study_area=study_area,
        anos=anos,
        diretorio_saida="./clima_temp"
        if arquivo_saida is None
        else Path(arquivo_saida).parent,
        prefixo_arquivo="clima_diario_detalhado",
    )

    # Carregar climatologia di√°ria
    climatologia = carregar_climatologia(arquivos["diaria"])

    # Aplicar suaviza√ß√£o se solicitado
    if suavizar:
        climatologia = _suavizar_climatologia_diaria(climatologia)
        print("‚úÖ Suaviza√ß√£o aplicada (janela m√≥vel de 7 dias)")

    # Salvar climatologia suavizada se necess√°rio
    if arquivo_saida is not None:
        arquivo_final = Path(arquivo_saida)
        _salvar_climatologia_processada(climatologia, arquivo_final, "diaria_suavizada")
        return climatologia, str(arquivo_final)

    return climatologia, arquivos["diaria"]


def _suavizar_climatologia_diaria(
    climatologia: dict[int, float], janela: int = 7
) -> dict[int, float]:
    """
    Aplica suaviza√ß√£o com janela m√≥vel na climatologia di√°ria.

    ANALOGIA DO POLIDOR DE DIAMANTES üíé
    Como um polidor que suaviza irregularidades para revelar
    o brilho natural, esta fun√ß√£o remove ru√≠dos di√°rios mantendo
    os padr√µes sazonais essenciais.
    """
    valores = np.array([climatologia[dia] for dia in range(1, 366)])

    # Aplicar m√©dia m√≥vel
    valores_suavizados = np.convolve(valores, np.ones(janela) / janela, mode="same")

    # Tratar bordas (primeiros e √∫ltimos dias)
    for i in range(janela // 2):
        # In√≠cio do ano
        valores_suavizados[i] = np.mean(valores[: i + janela // 2 + 1])
        # Final do ano
        valores_suavizados[-(i + 1)] = np.mean(valores[-(i + janela // 2 + 1) :])

    # Converter de volta para dicion√°rio
    # Converter de volta para dicion√°rio
    climatologia_suavizada = {}
    for dia in range(1, 366):
        climatologia_suavizada[dia] = round(valores_suavizados[dia - 1], 1)

    return climatologia_suavizada


def _salvar_climatologia_processada(
    climatologia: dict,
    arquivo: Path,
    tipo: str,
    metadata_extra: dict | None = None,
) -> None:
    """Salva climatologia processada com metadata espec√≠fica."""

    dados = {
        "climatologia": climatologia,
        "processamento": {
            "tipo": tipo,
            "criado_em": datetime.now().isoformat(),
            "num_periodos": len(climatologia),
        },
    }

    if metadata_extra:
        dados["metadata_extra"] = metadata_extra

    arquivo.parent.mkdir(parents=True, exist_ok=True)

    with open(arquivo, "w", encoding="utf-8") as f:
        json.dump(dados, f, indent=2, ensure_ascii=False)


def criar_climatologia_pentadas_operacional(
    study_area: StudyAreaType = None,
    anos: list[int] | None = None,
    arquivo_saida: str | Path | None = None,
) -> tuple[dict[int, float], str]:
    """
    Cria climatologia por pentadas para uso operacional.

    ANALOGIA DO METEOROLOGISTA OPERACIONAL ‚õàÔ∏è
    Como um meteorologista que precisa de previs√µes de 5 dias
    para opera√ß√µes pr√°ticas, esta fun√ß√£o cria "b√∫ssolas clim√°ticas"
    para per√≠odos pentadais.

    Parameters
    ----------
    study_area : StudyAreaType, optional
        √Årea de estudo flex√≠vel
    anos : List[int], optional
        Anos para calcular climatologia
    arquivo_saida : str or Path, optional
        Caminho espec√≠fico para salvar

    Returns
    -------
    Tuple[Dict[int, float], str]
        Climatologia por pentadas (73 per√≠odos) e caminho do arquivo
    """

    print("üóìÔ∏è CRIANDO CLIMATOLOGIA POR PENTADAS OPERACIONAL...")
    print("üìä 73 pentadas por ano (per√≠odos de 5 dias cada)")

    # Criar climatologias completas
    arquivos = criar_climatologias_completas(
        study_area=study_area,
        anos=anos,
        diretorio_saida="./clima_temp"
        if arquivo_saida is None
        else Path(arquivo_saida).parent,
        prefixo_arquivo="clima_pentadas_oper",
    )

    # Carregar climatologia por pentadas
    climatologia = carregar_climatologia(arquivos["pentadas"])

    # Mover arquivo se caminho espec√≠fico foi fornecido
    if arquivo_saida is not None:
        arquivo_final = Path(arquivo_saida)
        arquivo_final.parent.mkdir(parents=True, exist_ok=True)
        Path(arquivos["pentadas"]).rename(arquivo_final)
        print(f"üìÅ Arquivo movido para: {arquivo_final}")
        return climatologia, str(arquivo_final)

    return climatologia, arquivos["pentadas"]


# ============================================================================
# UTILIT√ÅRIOS PARA AN√ÅLISE DAS CLIMATOLOGIAS TEMPORAIS
# ============================================================================


def analisar_climatologia_temporal(arquivo_climatologia: str | Path) -> dict:
    """
    Analisa estat√≠sticas de uma climatologia temporal.

    ANALOGIA DO ANALISTA ESTAT√çSTICO üìà
    Como um analista que examina relat√≥rios financeiros para
    identificar tend√™ncias e padr√µes, esta fun√ß√£o "audita"
    as climatologias para revelar insights.

    Parameters
    ----------
    arquivo_climatologia : str or Path
        Caminho para arquivo de climatologia

    Returns
    -------
    Dict
        Estat√≠sticas e an√°lises da climatologia
    """

    print(f"üìä ANALISANDO CLIMATOLOGIA: {Path(arquivo_climatologia).name}")

    try:
        # Carregar dados
        with open(arquivo_climatologia, encoding="utf-8") as f:
            dados = json.load(f)

        climatologia = dados["climatologia"]
        info = dados.get("info", {})
        tipo = info.get("tipo", "desconhecido")

        # Converter chaves para int
        clima_dict = {int(k): v for k, v in climatologia.items()}
        valores = list(clima_dict.values())

        # An√°lises b√°sicas
        analise = {
            "arquivo": str(arquivo_climatologia),
            "tipo": tipo,
            "num_periodos": len(valores),
            "estatisticas_basicas": {
                "minimo": round(min(valores), 1),
                "maximo": round(max(valores), 1),
                "amplitude": round(max(valores) - min(valores), 1),
                "media": round(np.mean(valores), 1),
                "mediana": round(np.median(valores), 1),
                "desvio_padrao": round(np.std(valores), 1),
            },
        }

        # An√°lises espec√≠ficas por tipo
        if tipo == "mensal":
            analise["analise_sazonal"] = _analisar_sazonalidade_mensal(clima_dict)
        elif tipo == "diaria":
            analise["analise_anual"] = _analisar_ciclo_anual(clima_dict)
        elif tipo == "pentadas":
            analise["analise_pentadal"] = _analisar_padroes_pentadais(clima_dict)

        # Identificar extremos
        analise["extremos"] = _identificar_extremos(clima_dict, tipo)

        # Imprimir resumo
        _imprimir_resumo_analise(analise)

        return analise

    except Exception as e:
        print(f"‚ùå Erro na an√°lise: {e}")
        return {"erro": str(e)}


def _analisar_sazonalidade_mensal(climatologia: dict[int, float]) -> dict:
    """Analisa padr√µes sazonais na climatologia mensal."""

    # Identificar esta√ß√µes
    verao_austral = [12, 1, 2, 3]  # Dez-Mar
    outono_austral = [4, 5, 6]  # Abr-Jun
    inverno_austral = [7, 8, 9]  # Jul-Set
    primavera_austral = [10, 11]  # Out-Nov

    estacoes = {
        "verao_austral": [climatologia[m] for m in verao_austral if m in climatologia],
        "outono_austral": [
            climatologia[m] for m in outono_austral if m in climatologia
        ],
        "inverno_austral": [
            climatologia[m] for m in inverno_austral if m in climatologia
        ],
        "primavera_austral": [
            climatologia[m] for m in primavera_austral if m in climatologia
        ],
    }

    analise_estacoes = {}
    for estacao, valores in estacoes.items():
        if valores:
            analise_estacoes[estacao] = {
                "media": round(np.mean(valores), 1),
                "amplitude": round(max(valores) - min(valores), 1)
                if len(valores) > 1
                else 0.0,
            }

    # Identificar m√™s mais ao norte e mais ao sul
    mes_max = max(climatologia.keys(), key=lambda k: climatologia[k])
    mes_min = min(climatologia.keys(), key=lambda k: climatologia[k])

    nomes_meses = {
        1: "Janeiro",
        2: "Fevereiro",
        3: "Mar√ßo",
        4: "Abril",
        5: "Maio",
        6: "Junho",
        7: "Julho",
        8: "Agosto",
        9: "Setembro",
        10: "Outubro",
        11: "Novembro",
        12: "Dezembro",
    }

    return {
        "estacoes": analise_estacoes,
        "extremos_mensais": {
            "mes_mais_norte": {
                "mes": nomes_meses.get(mes_max, mes_max),
                "posicao": climatologia[mes_max],
            },
            "mes_mais_sul": {
                "mes": nomes_meses.get(mes_min, mes_min),
                "posicao": climatologia[mes_min],
            },
        },
        "amplitude_anual": round(climatologia[mes_max] - climatologia[mes_min], 1),
    }


def _analisar_ciclo_anual(climatologia: dict[int, float]) -> dict:
    """Analisa o ciclo anual completo (365 dias)."""

    valores = np.array(
        [climatologia[dia] for dia in range(1, 366) if dia in climatologia]
    )

    # Encontrar m√°ximos e m√≠nimos
    dia_max = max(climatologia.keys(), key=lambda k: climatologia[k])
    dia_min = min(climatologia.keys(), key=lambda k: climatologia[k])

    # Converter dia do ano para data aproximada
    def dia_para_data(dia_ano):
        data_base = datetime(2024, 1, 1)  # Ano bissexto para ter 366 dias
        return (data_base + pd.Timedelta(days=dia_ano - 1)).strftime("%d/%m")

    # An√°lise de tend√™ncias (derivada aproximada)
    gradientes = np.gradient(valores)
    periodos_subida = np.sum(gradientes > 0)
    periodos_descida = np.sum(gradientes < 0)

    return {
        "extremos_anuais": {
            "dia_mais_norte": {
                "dia_ano": dia_max,
                "data_aprox": dia_para_data(dia_max),
                "posicao": climatologia[dia_max],
            },
            "dia_mais_sul": {
                "dia_ano": dia_min,
                "data_aprox": dia_para_data(dia_min),
                "posicao": climatologia[dia_min],
            },
        },
        "tendencias": {
            "dias_subindo": int(periodos_subida),
            "dias_descendo": int(periodos_descida),
            "percentual_subida": round(100 * periodos_subida / len(valores), 1),
        },
        "amplitude_maxima": round(climatologia[dia_max] - climatologia[dia_min], 1),
    }


def _analisar_padroes_pentadais(climatologia: dict[int, float]) -> dict:
    """Analisa padr√µes nas pentadas (73 per√≠odos de 5 dias)."""

    valores = np.array([climatologia[p] for p in range(1, 74) if p in climatologia])

    # Pentadas extremas
    pentada_max = max(climatologia.keys(), key=lambda k: climatologia[k])
    pentada_min = min(climatologia.keys(), key=lambda k: climatologia[k])

    # Converter pentada para per√≠odo aproximado do ano
    def pentada_para_periodo(pentada):
        dia_inicio = (pentada - 1) * 5 + 1
        dia_fim = min(pentada * 5, 365)
        return f"Dias {dia_inicio}-{dia_fim}"

    # An√°lise de variabilidade entre pentadas consecutivas
    diferencas = np.abs(np.diff(valores))
    variabilidade_media = np.mean(diferencas)

    return {
        "extremos_pentadais": {
            "pentada_mais_norte": {
                "pentada": pentada_max,
                "periodo": pentada_para_periodo(pentada_max),
                "posicao": climatologia[pentada_max],
            },
            "pentada_mais_sul": {
                "pentada": pentada_min,
                "periodo": pentada_para_periodo(pentada_min),
                "posicao": climatologia[pentada_min],
            },
        },
        "variabilidade": {
            "mudanca_media_entre_pentadas": round(variabilidade_media, 1),
            "mudanca_maxima": round(np.max(diferencas), 1),
            "mudanca_minima": round(np.min(diferencas), 1),
        },
        "amplitude_pentadal": round(
            climatologia[pentada_max] - climatologia[pentada_min], 1
        ),
    }


def _identificar_extremos(climatologia: dict, tipo: str) -> dict:
    """Identifica valores extremos na climatologia."""

    valores = list(climatologia.values())
    q1 = np.percentile(valores, 25)
    q3 = np.percentile(valores, 75)
    iqr = q3 - q1

    # Limites para outliers
    limite_inferior = q1 - 1.5 * iqr
    limite_superior = q3 + 1.5 * iqr

    outliers = {}
    for periodo, valor in climatologia.items():
        if valor < limite_inferior:
            outliers[periodo] = {"valor": valor, "tipo": "extremo_sul"}
        elif valor > limite_superior:
            outliers[periodo] = {"valor": valor, "tipo": "extremo_norte"}

    return {
        "limites_iqr": {
            "q1": round(q1, 1),
            "q3": round(q3, 1),
            "limite_inferior": round(limite_inferior, 1),
            "limite_superior": round(limite_superior, 1),
        },
        "outliers": outliers,
        "num_outliers": len(outliers),
    }


def _imprimir_resumo_analise(analise: dict) -> None:
    """Imprime resumo formatado da an√°lise."""

    print("\nüìã RESUMO DA AN√ÅLISE:")
    print(f"   üìÑ Arquivo: {Path(analise['arquivo']).name}")
    print(f"   üìä Tipo: {analise['tipo'].upper()}")
    print(f"   üìà Per√≠odos: {analise['num_periodos']}")

    stats = analise["estatisticas_basicas"]
    print("\nüìà ESTAT√çSTICAS B√ÅSICAS:")
    print(f"   üî∫ M√°ximo: {stats['maximo']:+.1f}¬∞N")
    print(f"   üîª M√≠nimo: {stats['minimo']:+.1f}¬∞N")
    print(f"   üìè Amplitude: {stats['amplitude']:.1f}¬∞")
    print(f"   üìä M√©dia: {stats['media']:+.1f}¬∞N")
    print(f"   üìà Desvio: ¬±{stats['desvio_padrao']:.1f}¬∞")

    # Extremos espec√≠ficos
    extremos = analise.get("extremos", {})
    if extremos.get("num_outliers", 0) > 0:
        print("\n‚ö†Ô∏è  VALORES EXTREMOS:")
        print(f"   üî¢ Outliers detectados: {extremos['num_outliers']}")

    # An√°lise sazonal se dispon√≠vel
    if "analise_sazonal" in analise:
        saz = analise["analise_sazonal"]
        extremos_mensais = saz["extremos_mensais"]
        print("\nüåä PADR√ïES SAZONAIS:")
        print(
            f"   üèîÔ∏è  Mais ao norte: {extremos_mensais['mes_mais_norte']['mes']} "
            f"({extremos_mensais['mes_mais_norte']['posicao']:+.1f}¬∞N)"
        )
        print(
            f"   üèùÔ∏è  Mais ao sul: {extremos_mensais['mes_mais_sul']['mes']} "
            f"({extremos_mensais['mes_mais_sul']['posicao']:+.1f}¬∞N)"
        )
        print(f"   üìè Amplitude anual: {saz['amplitude_anual']:.1f}¬∞")


def comparar_climatologias_temporais(
    arquivo1: str | Path,
    arquivo2: str | Path,
    salvar_comparacao: bool = True,
    diretorio_saida: str | Path = "./comparacoes",
) -> dict:
    """
    Compara duas climatologias temporais.

    ANALOGIA DO JUIZ CLIM√ÅTICO ‚öñÔ∏è
    Como um juiz que compara evid√™ncias de diferentes casos,
    esta fun√ß√£o "julga" as diferen√ßas entre climatologias
    para identificar padr√µes e discrep√¢ncias.

    Parameters
    ----------
    arquivo1 : str or Path
        Primeira climatologia
    arquivo2 : str or Path
        Segunda climatologia para comparar
    salvar_comparacao : bool, default=True
        Se True, salva relat√≥rio de compara√ß√£o
    diretorio_saida : str or Path, default="./comparacoes"
        Diret√≥rio para salvar compara√ß√£o

    Returns
    -------
    Dict
        Relat√≥rio detalhado da compara√ß√£o
    """

    print("‚öñÔ∏è COMPARANDO CLIMATOLOGIAS TEMPORAIS:")
    print(f"   üìÑ Arquivo 1: {Path(arquivo1).name}")
    print(f"   üìÑ Arquivo 2: {Path(arquivo2).name}")

    try:
        # Carregar ambas climatologias
        with open(arquivo1, encoding="utf-8") as f:
            dados1 = json.load(f)
        with open(arquivo2, encoding="utf-8") as f:
            dados2 = json.load(f)

        clima1 = {int(k): v for k, v in dados1["climatologia"].items()}
        clima2 = {int(k): v for k, v in dados2["climatologia"].items()}

        # Verificar compatibilidade
        periodos_comuns = set(clima1.keys()) & set(clima2.keys())
        if len(periodos_comuns) == 0:
            raise ValueError("Climatologias n√£o t√™m per√≠odos em comum")

        # Calcular diferen√ßas
        diferencas = {}
        for periodo in periodos_comuns:
            diferencas[periodo] = clima1[periodo] - clima2[periodo]

        valores_diff = list(diferencas.values())

        # An√°lises estat√≠sticas
        comparacao = {
            "arquivos": {"arquivo1": str(arquivo1), "arquivo2": str(arquivo2)},
            "compatibilidade": {
                "periodos_arquivo1": len(clima1),
                "periodos_arquivo2": len(clima2),
                "periodos_comuns": len(periodos_comuns),
                "percentual_comum": round(
                    100 * len(periodos_comuns) / max(len(clima1), len(clima2)),
                    1,
                ),
            },
            "estatisticas_diferencas": {
                "diferenca_media": round(np.mean(valores_diff), 2),
                "diferenca_maxima": round(max(valores_diff), 2),
                "diferenca_minima": round(min(valores_diff), 2),
                "desvio_padrao_diff": round(np.std(valores_diff), 2),
                "correlacao": round(
                    np.corrcoef(
                        [clima1[p] for p in periodos_comuns],
                        [clima2[p] for p in periodos_comuns],
                    )[0, 1],
                    3,
                ),
            },
            "diferencas_detalhadas": diferencas,
        }

        # Classificar similaridade
        correlacao = comparacao["estatisticas_diferencas"]["correlacao"]
        desvio_diff = comparacao["estatisticas_diferencas"]["desvio_padrao_diff"]

        if correlacao > 0.95 and desvio_diff < 1.0:
            similaridade = "MUITO_ALTA"
            emoji = "üü¢"
        elif correlacao > 0.85 and desvio_diff < 2.0:
            similaridade = "ALTA"
            emoji = "üü°"
        elif correlacao > 0.70:
            similaridade = "MODERADA"
            emoji = "üü†"
        else:
            similaridade = "BAIXA"
            emoji = "üî¥"

        comparacao["similaridade"] = {
            "nivel": similaridade,
            "emoji": emoji,
            "interpretacao": _interpretar_similaridade(
                similaridade, correlacao, desvio_diff
            ),
        }

        # Imprimir resumo
        _imprimir_resumo_comparacao(comparacao)

        # Salvar compara√ß√£o se solicitado
        if salvar_comparacao:
            arquivo_comp = _salvar_relatorio_comparacao(comparacao, diretorio_saida)
            comparacao["arquivo_relatorio"] = str(arquivo_comp)

        return comparacao

    except Exception as e:
        print(f"‚ùå Erro na compara√ß√£o: {e}")
        return {"erro": str(e)}


def _interpretar_similaridade(nivel: str, correlacao: float, desvio: float) -> str:
    """Interpreta o n√≠vel de similaridade entre climatologias."""

    interpretacoes = {
        "MUITO_ALTA": f"Climatologias praticamente id√™nticas (r={correlacao:.3f}, œÉ={desvio:.1f}¬∞). "
        "Representam padr√µes clim√°ticos muito similares.",
        "ALTA": f"Climatologias muito similares (r={correlacao:.3f}, œÉ={desvio:.1f}¬∞). "
        "Pequenas diferen√ßas regionais ou metodol√≥gicas.",
        "MODERADA": f"Climatologias moderadamente similares (r={correlacao:.3f}, œÉ={desvio:.1f}¬∞). "
        "Diferen√ßas not√°veis mas padr√µes gerais compat√≠veis.",
        "BAIXA": f"Climatologias distintas (r={correlacao:.3f}, œÉ={desvio:.1f}¬∞). "
        "Representam padr√µes clim√°ticos diferentes ou √°reas distintas.",
    }

    return interpretacoes.get(nivel, "Similaridade n√£o determinada.")


def _imprimir_resumo_comparacao(comparacao: dict) -> None:
    """Imprime resumo formatado da compara√ß√£o."""

    print("\nüìä RESUMO DA COMPARA√á√ÉO:")

    compat = comparacao["compatibilidade"]
    print(
        f"   üìà Per√≠odos em comum: {compat['periodos_comuns']} "
        f"({compat['percentual_comum']:.1f}%)"
    )

    stats = comparacao["estatisticas_diferencas"]
    print(f"   üìè Diferen√ßa m√©dia: {stats['diferenca_media']:+.2f}¬∞")
    print(f"   üìà Correla√ß√£o: {stats['correlacao']:.3f}")
    print(f"   üìä Desvio das diferen√ßas: ¬±{stats['desvio_padrao_diff']:.2f}¬∞")

    sim = comparacao["similaridade"]
    print(f"\n{sim['emoji']} SIMILARIDADE: {sim['nivel']}")
    print(f"   üí¨ {sim['interpretacao']}")


def _salvar_relatorio_comparacao(comparacao: dict, diretorio: str | Path) -> Path:
    """Salva relat√≥rio detalhado da compara√ß√£o."""

    diretorio = Path(diretorio)
    diretorio.mkdir(parents=True, exist_ok=True)

    # Gerar nome do arquivo
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    nome_arquivo = f"comparacao_climatologias_{timestamp}.json"
    arquivo_relatorio = diretorio / nome_arquivo

    # Adicionar metadata ao relat√≥rio
    relatorio_completo = {
        "comparacao": comparacao,
        "metadata": {
            "criado_em": datetime.now().isoformat(),
            "versao": "1.0.0",
            "ferramenta": "LOCZCIT-IQR",
        },
    }

    with open(arquivo_relatorio, "w", encoding="utf-8") as f:
        json.dump(relatorio_completo, f, indent=2, ensure_ascii=False)

    print(f"üíæ Relat√≥rio salvo: {nome_arquivo}")
    return arquivo_relatorio


# ============================================================================
# NOVAS FUN√á√ïES PARA √ÅREAS ESPEC√çFICAS DO BRASIL - MANTIDAS
# ============================================================================


def climatologia_nordeste_brasileiro(
    anos_amostra: list[int] | None = None, mask_to_shape: bool = False
) -> MonthlyClimatology:
    """
    Calcula climatologia espec√≠fica para o Nordeste brasileiro.

    ANALOGIA DO ESPECIALISTA REGIONAL üèúÔ∏è
    Como um meteorologista que conhece intimamente os padr√µes
    clim√°ticos do sert√£o e litoral nordestino.

    Parameters
    ----------
    anos_amostra : List[int], optional
        Anos espec√≠ficos para an√°lise
    mask_to_shape : bool, default=False
        Se usar mascaramento preciso ou BBOX

    Returns
    -------
    Dict[int, float]
        Climatologia da ZCIT para o Nordeste
    """
    # √Årea do Nordeste brasileiro (aproximada)
    area_nordeste = (-18, -2, -48, -32)  # (lat_min, lat_max, lon_min, lon_max)

    print("üèúÔ∏è CALCULANDO CLIMATOLOGIA PARA O NORDESTE BRASILEIRO")
    print("üåµ Esta regi√£o √© especialmente sens√≠vel √† posi√ß√£o da ZCIT")

    return calcular_climatologia_personalizada(
        study_area=area_nordeste,
        anos_amostra=anos_amostra,
        mask_to_shape=mask_to_shape,
    )


def climatologia_amazonia_oriental(
    anos_amostra: list[int] | None = None, mask_to_shape: bool = False
) -> MonthlyClimatology:
    """
    Calcula climatologia espec√≠fica para a Amaz√¥nia Oriental.

    Parameters
    ----------
    anos_amostra : List[int], optional
        Anos espec√≠ficos para an√°lise
    mask_to_shape : bool, default=False
        Se usar mascaramento preciso ou BBOX

    Returns
    -------
    Dict[int, float]
        Climatologia da ZCIT para a Amaz√¥nia Oriental
    """
    # √Årea da Amaz√¥nia Oriental (aproximada)
    area_amazonia = (-10, 5, -55, -40)  # (lat_min, lat_max, lon_min, lon_max)

    print("üå≥ CALCULANDO CLIMATOLOGIA PARA A AMAZ√îNIA ORIENTAL")
    print("üåßÔ∏è Regi√£o cr√≠tica para padr√µes de precipita√ß√£o amaz√¥nica")

    return calcular_climatologia_personalizada(
        study_area=area_amazonia,
        anos_amostra=anos_amostra,
        mask_to_shape=mask_to_shape,
    )


def climatologia_atlantico_tropical(
    anos_amostra: list[int] | None = None, mask_to_shape: bool = False
) -> MonthlyClimatology:
    """
    Calcula climatologia espec√≠fica para o Atl√¢ntico Tropical.

    Parameters
    ----------
    anos_amostra : List[int], optional
        Anos espec√≠ficos para an√°lise
    mask_to_shape : bool, default=False
        Se usar mascaramento preciso ou BBOX

    Returns
    -------
    Dict[int, float]
        Climatologia da ZCIT para o Atl√¢ntico Tropical
    """
    # √Årea do Atl√¢ntico Tropical (cl√°ssica para ZCIT)
    area_atlantico = (
        -15,
        20,
        -60,
        -10,
    )  # (lat_min, lat_max, lon_min, lon_max)

    print("üåä CALCULANDO CLIMATOLOGIA PARA O ATL√ÇNTICO TROPICAL")
    print("üåç Regi√£o de refer√™ncia cl√°ssica para estudos da ZCIT")

    return calcular_climatologia_personalizada(
        study_area=area_atlantico,
        anos_amostra=anos_amostra,
        mask_to_shape=mask_to_shape,
    )


# ============================================================================
# EXEMPLO DE USO COMPLETO - ATUALIZADO
# ============================================================================

if __name__ == "__main__":
    """
    Exemplo de uso das funcionalidades do m√≥dulo de climatologia.
    """
    print("üåä EXEMPLO DE USO - M√ìDULO CLIMATOLOGIA ZCIT")
    print("=" * 60)

    # ========================================================================
    # 1. CLIMATOLOGIA R√ÅPIDA DA LITERATURA
    # ========================================================================
    print("\n1Ô∏è‚É£ CLIMATOLOGIA DA LITERATURA CIENT√çFICA:")
    clima_literatura = obter_climatologia_zcit_rapida()
    print(f"   Mar√ßo: {clima_literatura[3]:+.1f}¬∞N")
    print(f"   Julho: {clima_literatura[7]:+.1f}¬∞N")

    # ========================================================================
    # 2. EXEMPLO DE COMPARA√á√ÉO
    # ========================================================================
    print("\n2Ô∏è‚É£ EXEMPLO DE COMPARA√á√ÉO:")
    status, desvio, interpretacao = comparar_com_climatologia_cientifica(
        mes=3, posicao_encontrada=-0.32, usar_climatologia_calculada=False
    )

    # ========================================================================
    # 3. CLIMATOLOGIA COM √ÅREA FLEX√çVEL (NOVIDADE!)
    # ========================================================================
    print("\n3Ô∏è‚É£ CLIMATOLOGIA COM √ÅREA DE ESTUDO FLEX√çVEL:")

    # Exemplo 1: BBOX personalizado
    print("\nüìê Exemplo com BBOX do Nordeste:")
    try:
        clima_ne = climatologia_nordeste_brasileiro(anos_amostra=[2020, 2021, 2022])
        print(f"   ZCIT em mar√ßo no NE: {clima_ne[3]:+.1f}¬∞N")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")

    # Exemplo 2: √Årea padr√£o (usando geometria interna)
    print("\nüìç Exemplo com √°rea padr√£o:")
    try:
        clima_padrao = calcular_climatologia_personalizada(
            study_area=None,
            anos_amostra=[2020, 2022],  # Usa geometria padr√£o
        )
        print(f"   ZCIT em julho (padr√£o): {clima_padrao[7]:+.1f}¬∞N")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")

    # ========================================================================
    # 4. SALVAR E CARREGAR CLIMATOLOGIA
    # ========================================================================
    print("\n4Ô∏è‚É£ SALVANDO E CARREGANDO CLIMATOLOGIA:")
    try:
        # Salvar com metadata extra
        metadata_extra = {
            "regiao": "Literatura Cient√≠fica",
            "autor": "LOCZCIT-IQR",
            "observacoes": "Baseado em Waliser & Gautier (1993)",
        }
        salvar_climatologia(
            clima_literatura,
            "exemplo_climatologia.json",
            metadata_extra=metadata_extra,
        )

        # Carregar novamente
        clima_carregada = carregar_climatologia("exemplo_climatologia.json")
        print("‚úÖ Climatologia recarregada com sucesso!")
        print(f"   Verifica√ß√£o: mar√ßo = {clima_carregada[3]:+.1f}¬∞N")

    except Exception as e:
        print(f"‚ùå Erro ao salvar/carregar: {e}")

    # ========================================================================
    # 5. INTERFACE LIMPA (MANTIDA)
    # ========================================================================
    print("\n5Ô∏è‚É£ TESTE DA INTERFACE LIMPA:")
    try:
        status_limpo = analise_zcit_rapida(-0.5, 3)
        print(f"   Status obtido: {status_limpo}")
    except Exception as e:
        print(f"   ‚ùå Erro na interface limpa: {e}")

    # ========================================================================
    # 6. DEMONSTRA√á√ÉO DE FLEXIBILIDADE
    # ========================================================================
    print("\n6Ô∏è‚É£ DEMONSTRA√á√ÉO DA FLEXIBILIDADE DE √ÅREAS:")

    areas_exemplo = {
        "Atl√¢ntico Tropical": (-15, 20, -60, -10),
        "Equador": (-5, 5, -180, 180),
        "Brasil Norte": (-10, 5, -75, -45),
    }

    for nome_area, bbox in areas_exemplo.items():
        print(f"\n   üó∫Ô∏è  Testando: {nome_area}")
        print(f"      BBOX: {bbox}")
        # Na pr√°tica, voc√™ faria:
        # clima = calcular_climatologia_personalizada(study_area=bbox)
        print("      ‚úÖ Configura√ß√£o v√°lida para climatologia!")

    print("\n" + "=" * 60)
    print("üìö REFER√äNCIAS CIENT√çFICAS UTILIZADAS:")
    print("   ‚Ä¢ Waliser & Gautier (1993) - Journal of Climate")
    print("   ‚Ä¢ Xie & Philander (1994) - Journal of Climate")
    print("   ‚Ä¢ Ferreira et al. (2005) - Revista Brasileira de Meteorologia")
    print("   ‚Ä¢ Cavalcanti et al. (2009) - Tempo e Clima no Brasil")
    print("   ‚Ä¢ NOAA Climate Data Record (1979-2023)")

    print("\nüéØ PRINCIPAIS MELHORIAS DESTA VERS√ÉO:")
    print("   ‚úÖ √Årea de estudo flex√≠vel (None, BBOX, arquivos, GeoDataFrame)")
    print("   ‚úÖ Integra√ß√£o com load_data_dual_scale")
    print("   ‚úÖ Mascaramento opcional para geometrias precisas")
    print("   ‚úÖ Fun√ß√µes regionais pr√©-configuradas")
    print("   ‚úÖ Metadata expandida nos arquivos salvos")
    print("   ‚úÖ Interface limpa mantida para usu√°rios finais")

    print("\nüöÄ M√≥dulo pronto para an√°lises clim√°ticas avan√ßadas!")

# ============================================================================
# FUN√á√ÉO DE TESTE DAS NOVAS FUNCIONALIDADES
# ============================================================================


def _testar_novas_funcionalidades():
    """Fun√ß√£o para testar as novas funcionalidades de √°rea flex√≠vel."""
    print("\nüß™ TESTANDO NOVAS FUNCIONALIDADES DE √ÅREA FLEX√çVEL")
    print("=" * 60)

    # Teste 1: Diferentes tipos de study_area
    print("\n1Ô∏è‚É£ Teste de diferentes tipos de study_area:")

    try:
        # BBOX
        print("   üìê Testando BBOX...")
        ClimatologiaZCIT(study_area=(-10, 10, -50, -30))
        print("   ‚úÖ BBOX aceito")

        # None (padr√£o)
        print("   üìç Testando √°rea padr√£o...")
        ClimatologiaZCIT(study_area=None)
        print("   ‚úÖ √Årea padr√£o aceita")

        # String (arquivo)
        print("   üìÅ Testando string de arquivo...")
        ClimatologiaZCIT(study_area="teste.shp", mask_to_shape=True)
        print("   ‚úÖ String de arquivo aceita")

    except Exception as e:
        print(f"   ‚ùå Erro nos testes b√°sicos: {e}")

    # Teste 2: Fun√ß√µes regionais
    print("\n2Ô∏è‚É£ Teste das fun√ß√µes regionais:")

    funcoes_regionais = [
        ("Nordeste", climatologia_nordeste_brasileiro),
        ("Amaz√¥nia", climatologia_amazonia_oriental),
        ("Atl√¢ntico", climatologia_atlantico_tropical),
    ]

    for nome, funcao in funcoes_regionais:
        try:
            print(f"   üó∫Ô∏è  Testando {nome}...")
            # Teste apenas com configura√ß√£o (n√£o execu√ß√£o completa)
            # clima = funcao(anos_amostra=[2022])
            print(f"   ‚úÖ Fun√ß√£o {nome} configurada corretamente")
        except Exception as e:
            print(f"   ‚ùå Erro na fun√ß√£o {nome}: {e}")

    # Teste 3: Compara√ß√£o com vers√£o anterior
    print("\n3Ô∏è‚É£ Teste de compatibilidade com vers√£o anterior:")

    try:
        # Modo antigo (ainda deve funcionar)
        ClimatologiaZCIT(
            anos_inicio=2020,
            anos_fim=2022,
            study_area=(
                -10,
                10,
                -40,
                -20,
            ),  # Equivale ao antigo area_atlantico
        )
        print("   ‚úÖ Compatibilidade com modo antigo mantida")

        # Modo novo
        ClimatologiaZCIT(
            anos_inicio=2020,
            anos_fim=2022,
            study_area=(-10, 10, -40, -20),
            mask_to_shape=True,
        )
        print("   ‚úÖ Modo novo com mascaramento funcional")

    except Exception as e:
        print(f"   ‚ùå Erro na compatibilidade: {e}")

    print("\n‚úÖ Todos os testes das novas funcionalidades conclu√≠dos!")


# Criar def para calcular latitude media
def calcular_latitude_media(zcit_line):
    if zcit_line and hasattr(zcit_line, "xy"):
        return np.mean(zcit_line.xy[1])
    return None


# Imprimir resultados de forma limpa
def imprimir_resultados_climatologia(status, desvio, interpretacao):
    """
    Imprime resultados de forma limpa.

    Parameters
    ----------
    status : str
        Status da an√°lise climatol√≥gica
    desvio : float
        Desvio calculado
    interpretacao : str
        Interpreta√ß√£o do resultado
    """
    print("\n‚úÖ An√°lise climatol√≥gica conclu√≠da!")
    print(f"   Status: {status}")
    print(f"   Desvio: {desvio:+.1f}¬∞")
    print(f"   Interpreta√ß√£o: {interpretacao}")


# Imprimir resultados
# 6. Conclus√µes e resumo
# print("\n" + "="*60)
# print("üéØ CONCLUS√ïES DA AN√ÅLISE")

# if zcit_line:
#     print("\n‚úÖ AN√ÅLISE CONCLU√çDA COM SUCESSO!")
#     print("\nüìã Resumo dos Resultados:")
#     print(f"   ‚Ä¢ Per√≠odo analisado: {titulo_mes}")
#     print(f"   ‚Ä¢ Pontos do eixo ZCIT identificados: {len(min_coords)}")
#     print(f"   ‚Ä¢ Outliers removidos pela an√°lise IQR: {len(coords_outliers)}")
#     print(f"   ‚Ä¢ Posi√ß√£o m√©dia da ZCIT (Latitude): {np.mean(zcit_line.xy[1]):.2f}¬∞")
# else:
#     print("\n‚ùå AN√ÅLISE CONCLU√çDA, MAS A LINHA DA ZCIT N√ÉO P√îDE SER GERADA.")
#     print("   -> Verifique o n√∫mero de pontos v√°lidos encontrados.")

# print("\n" + "="*60)


# Imprimir analise da ZCIT
def print_analisar_zcit(zcit_line, min_coords, coords_outliers, titulo_mes):
    """
    Analisa a linha da ZCIT e imprime resultados.

    Parameters
    ----------
    zcit_line : LineString
        Linha da ZCIT gerada pela an√°lise
    min_coords : list
        Coordenadas m√≠nimas da ZCIT
    coords_outliers : list
        Coordenadas dos outliers removidos pela an√°lise IQR
    titulo_mes : str
        T√≠tulo do m√™s analisado
    """

    latitude_media = calcular_latitude_media(zcit_line)

    print("\n" + "=" * 60)
    print("üéØ CONCLUS√ïES DA AN√ÅLISE")

    if zcit_line:
        print("\n‚úÖ AN√ÅLISE CONCLU√çDA COM SUCESSO!")
        print("\nüìã Resumo dos Resultados:")
        print(f"   ‚Ä¢ Per√≠odo analisado: {titulo_mes}")
        print(f"   ‚Ä¢ Pontos do eixo ZCIT identificados: {len(min_coords)}")
        print(f"   ‚Ä¢ Outliers removidos pela an√°lise IQR: {len(coords_outliers)}")
        print(f"   ‚Ä¢ Posi√ß√£o m√©dia da ZCIT (Latitude): {latitude_media:.2f}¬∞")
    else:
        print("\n‚ùå AN√ÅLISE CONCLU√çDA, MAS A LINHA DA ZCIT N√ÉO P√îDE SER GERADA.")
        print("   -> Verifique o n√∫mero de pontos v√°lidos encontrados.")

    print("\n" + "=" * 60)


def criar_climatologia_olr(
    anos_inicio: int = 1994,
    anos_fim: int = 2023,
    cache_dir: str = "./climatologia_cache",
    diretorio_saida: str = "./climatologia_output",
    area_estudo: tuple[float, float, float, float] | None = None,
    anos_amostra: list[int] | None = None,
    salvar_netcdf: bool = True,
    verbose: bool = True,
) -> dict[str, xr.Dataset]:
    """
    Cria climatologias de OLR usando NOAADataLoader com processamento corrigido.

    ANALOGIA DO CHEF MESTRE üë®‚Äçüç≥
    √â como um chef experiente que:
    1. üõí Vai ao mercado buscar ingredientes frescos (download dos dados)
    2. üßΩ Limpa e prepara cada ingrediente (converte longitude, remove bissextos)
    3. ‚úÇÔ∏è Corta na medida certa (aplica filtro de √°rea)
    4. üë®‚Äçüç≥ Cria tr√™s receitas diferentes (mensal, di√°ria, pentadal)
    5. üì¶ Embala tudo para uso futuro (salva em NetCDF)

    Parameters
    ----------
    anos_inicio : int, default 1994
        Ano inicial para climatologia
    anos_fim : int, default 2023
        Ano final para climatologia
    cache_dir : str, default "./climatologia_cache"
        Diret√≥rio para cache dos dados originais da NOAA
    diretorio_saida : str, default "./climatologia_output"
        Diret√≥rio onde salvar as climatologias finais
    area_estudo : tuple, optional
        (lat_min, lat_max, lon_min, lon_max) para recortar √°rea espec√≠fica
        Coordenadas em -180/+180 para longitude
    anos_amostra : List[int], optional
        Lista espec√≠fica de anos para processar. Se None, usa todos os anos
    salvar_netcdf : bool, default True
        Se deve salvar os resultados em arquivos NetCDF
    verbose : bool, default True
        Se deve mostrar informa√ß√µes durante o processamento

    Returns
    -------
    Dict[str, xr.Dataset]
        Dicion√°rio com as tr√™s climatologias:
        - 'mensal': Climatologia mensal (12 valores)
        - 'diaria': Climatologia por dia do ano (365 valores)
        - 'pentadal': Climatologia por pentadas (73 valores)

    Examples
    --------
    >>> # Uso b√°sico - climatologia global
    >>> climatologias = criar_climatologia_olr(
    ...     anos_inicio=1994,
    ...     anos_fim=2023
    ... )

    >>> # Uso avan√ßado - apenas para regi√£o do Nordeste brasileiro
    >>> climatologias = criar_climatologia_olr(
    ...     anos_inicio=1994,
    ...     anos_fim=2023,
    ...     area_estudo=(-18, 2, -48, -32),  # Nordeste brasileiro
    ...     anos_amostra=[1995, 2000, 2005, 2010, 2015, 2020]  # Anos representativos
    ... )

    Notes
    -----
    Esta vers√£o corrigida:
    - Usa NOAADataLoader para download e cache autom√°tico
    - Aplica convers√£o de longitude (0-360 ‚Üí -180/+180) automaticamente
    - Remove dias bissextos CORRETAMENTE (dia 60 = 29/02)
    - Aplica controle de qualidade aos dados
    - Garante climatologia di√°ria com exatamente 365 dias
    - Cria pentadas com exatamente 73 grupos
    """

    if verbose:
        print("üåç CRIANDO CLIMATOLOGIAS OLR - VERS√ÉO CORRIGIDA")
        print("=" * 60)
        print(f"üìÖ Per√≠odo: {anos_inicio} - {anos_fim}")
        print(f"üìÅ Cache: {cache_dir}")
        print(f"üíæ Sa√≠da: {diretorio_saida}")
        if area_estudo:
            lat_min, lat_max, lon_min, lon_max = area_estudo
            print(f"üó∫Ô∏è √Årea: {lat_min}¬∞-{lat_max}¬∞N, {lon_min}¬∞-{lon_max}¬∞E")
        else:
            print("üåê √Årea: Global")

    # Criar diret√≥rios
    Path(cache_dir).mkdir(parents=True, exist_ok=True)
    Path(diretorio_saida).mkdir(parents=True, exist_ok=True)

    # Inicializar loader
    loader = NOAADataLoader(cache_dir=cache_dir)

    # Determinar anos a processar
    if anos_amostra is None:
        anos_para_processar = list(range(anos_inicio, anos_fim + 1))
    else:
        anos_para_processar = anos_amostra

    if verbose:
        print(f"üìã Processando {len(anos_para_processar)} anos: {anos_para_processar}")

    # ========================================================================
    # ETAPA 1: CARREGAR E PROCESSAR DADOS ANO POR ANO
    # ========================================================================

    datasets_processados = []
    anos_com_sucesso = []

    for i, ano in enumerate(anos_para_processar, 1):
        if verbose:
            print(f"\nüìÖ [{i}/{len(anos_para_processar)}] Processando {ano}...")

        try:
            # Carregar dados do ano usando NOAADataLoader
            # Isso j√° aplica: convers√£o longitude, filtro √°rea, remo√ß√£o bissextos, QC
            dados_ano = loader.load_data(
                start_date=f"{ano}-01-01",
                end_date=f"{ano}-12-31",
                study_area=area_estudo,
                auto_download=True,
                quality_control=True,
                remove_leap_days=True,  # ‚úÖ Remove bissextos automaticamente
            )

            if dados_ano is None:
                if verbose:
                    print(f"   ‚ö†Ô∏è Dados n√£o dispon√≠veis para {ano}")
                continue

            # Verificar se tem exatamente 365 dias (bissextos removidos)
            n_dias = len(dados_ano.time)
            if n_dias != 365:
                if verbose:
                    print(f"   ‚ö†Ô∏è Ano {ano} tem {n_dias} dias (esperado: 365)")
                # Continuar mesmo assim, pois pode ser problema espec√≠fico do ano

            datasets_processados.append(dados_ano)
            anos_com_sucesso.append(ano)

            if verbose:
                dims = dict(dados_ano.dims)
                print(f"   ‚úÖ Sucesso: {dims}")

        except Exception as e:
            if verbose:
                print(f"   ‚ùå Erro em {ano}: {e}")
            continue

    if not datasets_processados:
        raise RuntimeError("Nenhum dado foi carregado com sucesso!")

    if verbose:
        print("\nüìä RESUMO DO CARREGAMENTO:")
        print(f"   ‚úÖ Anos processados: {len(anos_com_sucesso)}")
        print(
            f"   ‚ùå Anos com falha: {len(anos_para_processar) - len(anos_com_sucesso)}"
        )
        print(f"   üìã Anos usados: {anos_com_sucesso}")

    # ========================================================================
    # ETAPA 2: COMBINAR TODOS OS DADOS
    # ========================================================================

    if verbose:
        print(f"\nüîó Combinando {len(datasets_processados)} datasets...")

    try:
        # Combinar datasets por coordenada temporal
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            OLR_combinado = xr.concat(
                datasets_processados,
                dim="time",
                combine_attrs="override",  # Usar atributos do primeiro dataset
            )

        # Verificar que o tempo est√° ordenado
        OLR_combinado = OLR_combinado.sortby("time")

        if verbose:
            dims_final = dict(OLR_combinado.dims)
            periodo_inicio = str(OLR_combinado.time.min().values)[:10]
            periodo_fim = str(OLR_combinado.time.max().values)[:10]
            print("   ‚úÖ Combina√ß√£o conclu√≠da:")
            print(f"      Dimens√µes: {dims_final}")
            print(f"      Per√≠odo: {periodo_inicio} at√© {periodo_fim}")

    except Exception as e:
        raise RuntimeError(f"Erro ao combinar datasets: {e}")

    # ========================================================================
    # ETAPA 3: CRIAR CLIMATOLOGIAS
    # ========================================================================

    climatologias = {}

    # 3.1 CLIMATOLOGIA MENSAL
    if verbose:
        print("\nüìÖ Criando climatologia mensal...")

    try:
        OLR_climatologia_mensal = OLR_combinado.groupby("time.month").mean(dim="time")
        climatologias["mensal"] = OLR_climatologia_mensal

        if verbose:
            print(
                f"   ‚úÖ Climatologia mensal: {len(OLR_climatologia_mensal.month)} meses"
            )

    except Exception as e:
        if verbose:
            print(f"   ‚ùå Erro na climatologia mensal: {e}")
        raise

    # 3.2 CLIMATOLOGIA DI√ÅRIA (dia do ano) - CORRE√á√ÉO APLICADA
    if verbose:
        print("üìÜ Criando climatologia por dia do ano...")

    try:
        # Criar climatologia di√°ria inicial
        OLR_climatologia_dia_ano_original = OLR_combinado.groupby(
            "time.dayofyear"
        ).mean(dim="time")

        # ============================================================================
        # CORRE√á√ÉO CR√çTICA: Remover dia 60 (29/02) se existir
        # ============================================================================
        if verbose:
            n_dias_original = len(OLR_climatologia_dia_ano_original.dayofyear)
            tem_dia_60 = 60 in OLR_climatologia_dia_ano_original.dayofyear.values
            print(f"   üìä Climatologia inicial: {n_dias_original} dias")
            print(f"   üîç Dia 60 (29/02) presente: {tem_dia_60}")

        if 60 in OLR_climatologia_dia_ano_original.dayofyear.values:
            # Remover dia 60 (29/02) especificamente
            OLR_climatologia_dia_ano = OLR_climatologia_dia_ano_original.where(
                OLR_climatologia_dia_ano_original.dayofyear != 60, drop=True
            )
            if verbose:
                print("   üóëÔ∏è Dia 60 (29/02) removido")
                print(
                    f"   ‚úÖ Climatologia corrigida: {len(OLR_climatologia_dia_ano.dayofyear)} dias"
                )
        else:
            OLR_climatologia_dia_ano = OLR_climatologia_dia_ano_original
            if verbose:
                print("   ‚úÖ Nenhuma corre√ß√£o necess√°ria")

        climatologias["diaria"] = OLR_climatologia_dia_ano

        # Verifica√ß√£o final
        n_dias_final = len(OLR_climatologia_dia_ano.dayofyear)
        if n_dias_final != 365:
            if verbose:
                print(
                    f"   ‚ö†Ô∏è AVISO: Climatologia di√°ria tem {n_dias_final} dias (esperado: 365)"
                )

    except Exception as e:
        if verbose:
            print(f"   ‚ùå Erro na climatologia di√°ria: {e}")
        raise

    # 3.3 CLIMATOLOGIA PENTADAL - CORRE√á√ÉO APLICADA
    if verbose:
        print("üìä Criando climatologia pentadal...")

    try:
        # ============================================================================
        # ESTRAT√âGIA CORRIGIDA PARA PENTADAS
        # ============================================================================

        # Verificar quantos dias temos
        n_dias_diarios = len(OLR_climatologia_dia_ano.dayofyear)

        if n_dias_diarios == 365:
            # M√âTODO 1: Renumerar dias para sequ√™ncia cont√≠nua 1-365
            if verbose:
                print("   üîß Renumerando dias para sequ√™ncia cont√≠nua...")

            # Criar nova coordenada sequencial
            dias_sequenciais = list(range(1, n_dias_diarios + 1))

            # Criar dataset tempor√°rio com numera√ß√£o sequencial
            clima_temp = OLR_climatologia_dia_ano.assign_coords(
                dayofyear=dias_sequenciais
            )

            # Criar pentadas
            OLR_climatologia_pentada = (
                clima_temp.coarsen(dayofyear=5, boundary="trim")
                .mean()
                .rename({"dayofyear": "pentad"})
            )

            # Ajustar coordenadas das pentadas (1 a 73)
            n_pentadas = len(OLR_climatologia_pentada.pentad)
            pentadas_coords = np.arange(1, n_pentadas + 1)
            OLR_climatologia_pentada = OLR_climatologia_pentada.assign_coords(
                pentad=pentadas_coords
            )

            if verbose:
                print(f"   ‚úÖ M√©todo renumera√ß√£o: {n_pentadas} pentadas")
                print(
                    f"   üìä Matem√°tica: {n_dias_diarios} √∑ 5 = {n_dias_diarios / 5:.1f}"
                )

        else:
            # M√âTODO 2: Usar boundary='pad' para lidar com gaps
            if verbose:
                print("   üîß Usando boundary='pad' para gaps...")

            OLR_climatologia_pentada = (
                OLR_climatologia_dia_ano.coarsen(dayofyear=5, boundary="pad")
                .mean()
                .rename({"dayofyear": "pentad"})
            )

            # Ajustar coordenadas das pentadas
            n_pentadas = len(OLR_climatologia_pentada.pentad)
            pentadas_coords = np.arange(1, n_pentadas + 1)
            OLR_climatologia_pentada = OLR_climatologia_pentada.assign_coords(
                pentad=pentadas_coords
            )

            if verbose:
                print(f"   ‚úÖ M√©todo pad: {n_pentadas} pentadas")

        climatologias["pentadal"] = OLR_climatologia_pentada

        if verbose:
            n_pentadas_final = len(OLR_climatologia_pentada.pentad)
            print(f"   ‚úÖ Climatologia pentadal: {n_pentadas_final} pentadas")

            # Verifica√ß√£o da expectativa (73 pentadas)
            if n_pentadas_final == 73:
                print("   üéØ PERFEITO: 73 pentadas conforme esperado!")
            else:
                print(f"   ‚ö†Ô∏è ATEN√á√ÉO: {n_pentadas_final} pentadas (esperado: 73)")

    except Exception as e:
        if verbose:
            print(f"   ‚ùå Erro na climatologia pentadal: {e}")
        raise

    # ========================================================================
    # ETAPA 4: ADICIONAR METADADOS CORRIGIDOS
    # ========================================================================

    metadados_base = {
        "titulo": "Climatologia OLR NOAA",
        "fonte": "NOAA Climate Data Record",
        "periodo": f"{anos_com_sucesso[0]}-{anos_com_sucesso[-1]}",
        "anos_processados": len(anos_com_sucesso),
        "metodo": "Media aritmetica",
        "criado_em": str(np.datetime64("now")),
        "versao_loczcit": "2.0.0",
        "leap_days_removed": "true",  # ‚Üê CORRE√á√ÉO: string em vez de boolean
        "metodologia_bissextos": "Dia 60 (29/02) removido da climatologia diaria",
    }

    if area_estudo:
        metadados_base["area_estudo"] = (
            f"{area_estudo[0]}¬∞-{area_estudo[1]}¬∞N, {area_estudo[2]}¬∞-{area_estudo[3]}¬∞E"
        )
    else:
        metadados_base["area_estudo"] = "Global"

    # Aplicar metadados a cada climatologia
    for tipo, dataset in climatologias.items():
        dataset.attrs.update(metadados_base)
        dataset.attrs["tipo_climatologia"] = tipo

        # Metadados espec√≠ficos por tipo
        if tipo == "diaria":
            dataset.attrs["observacao"] = "Calendario de 365 dias (29/02 removido)"
        elif tipo == "pentadal":
            dataset.attrs["observacao"] = "Pentadas baseadas em calendario de 365 dias"

    # ========================================================================
    # ETAPA 5: SALVAR EM ARQUIVOS NETCDF (CORRIGIDO)
    # ========================================================================

    if salvar_netcdf:
        if verbose:
            print("\nüíæ Salvando climatologias em arquivos NetCDF...")

        # Gerar identificador da √°rea para nome do arquivo
        if area_estudo:
            area_id = (
                f"_{area_estudo[0]}_{area_estudo[1]}_{area_estudo[2]}_{area_estudo[3]}"
            )
        else:
            area_id = "_global"

        periodo_id = f"{anos_com_sucesso[0]}_{anos_com_sucesso[-1]}"

        nomes_arquivos = {
            "mensal": f"OLR_climatologia_mensal_{periodo_id}{area_id}.nc",
            "diaria": f"OLR_climatologia_diaria_365dias_{periodo_id}{area_id}.nc",  # ‚Üê Indicar 365 dias
            "pentadal": f"OLR_climatologia_pentadal_73pentadas_{periodo_id}{area_id}.nc",  # ‚Üê Indicar 73 pentadas
        }

        for tipo, dataset in climatologias.items():
            try:
                caminho_completo = Path(diretorio_saida) / nomes_arquivos[tipo]

                # Configurar encoding otimizado
                encoding = {"olr": {"zlib": True, "complevel": 6, "dtype": "float32"}}

                dataset.to_netcdf(caminho_completo, encoding=encoding, format="NETCDF4")

                if verbose:
                    size_mb = caminho_completo.stat().st_size / (1024 * 1024)
                    print(f"   ‚úÖ {nomes_arquivos[tipo]} ({size_mb:.1f} MB)")

            except Exception as e:
                if verbose:
                    print(f"   ‚ùå Erro ao salvar {tipo}: {e}")

    # ========================================================================
    # ETAPA 6: RELAT√ìRIO FINAL CORRIGIDO
    # ========================================================================

    if verbose:
        print("\nüìà RELAT√ìRIO FINAL DAS CLIMATOLOGIAS:")
        print("=" * 50)

        for tipo, dataset in climatologias.items():
            dims = dict(dataset.dims)
            if "olr" in dataset.data_vars:
                media_geral = float(dataset.olr.mean())
                print(f"üìä {tipo.upper()}:")
                print(f"   Dimens√µes: {dims}")
                print(f"   OLR m√©dio: {media_geral:.1f} W/m¬≤")

                # Informa√ß√µes espec√≠ficas
                if tipo == "diaria":
                    n_dias = len(dataset.dayofyear)
                    print(f"   üóìÔ∏è Dias: {n_dias} (sem 29/02)")
                elif tipo == "pentadal":
                    n_pentadas = len(dataset.pentad)
                    print(f"   üìä Pentadas: {n_pentadas}")

        # Estat√≠sticas sobre anos bissextos
        anos_bissextos = [
            ano
            for ano in anos_com_sucesso
            if ano % 4 == 0 and (ano % 100 != 0 or ano % 400 == 0)
        ]
        print("\nüìÖ ESTAT√çSTICAS TEMPORAIS:")
        print(f"   Anos processados: {len(anos_com_sucesso)}")
        print(f"   Anos bissextos: {len(anos_bissextos)} ({anos_bissextos})")
        print(f"   Anos normais: {len(anos_com_sucesso) - len(anos_bissextos)}")
        print("   M√©todo de bissextos: Remo√ß√£o do dia 60 (29/02)")

        print("\nüéâ CLIMATOLOGIAS CRIADAS COM SUCESSO!")
        print(f"   üìÅ Arquivos salvos em: {diretorio_saida}")
        print(f"   üìÖ Baseado em {len(anos_com_sucesso)} anos de dados")
        print("   ‚úÖ Corre√ß√£o de bissextos aplicada")

    return climatologias


def validar_climatologia(climatologias: dict[str, xr.Dataset]) -> dict[str, bool]:
    """
    Valida se as climatologias foram criadas corretamente.

    Parameters
    ----------
    climatologias : Dict[str, xr.Dataset]
        Dicion√°rio com as climatologias criadas

    Returns
    -------
    Dict[str, bool]
        Resultado da valida√ß√£o para cada tipo
    """

    resultados = {}

    print("üîç VALIDA√á√ÉO DAS CLIMATOLOGIAS:")
    print("=" * 40)

    # Validar climatologia mensal
    if "mensal" in climatologias:
        clima_mensal = climatologias["mensal"]
        n_meses = len(clima_mensal.month)
        resultado_mensal = n_meses == 12
        resultados["mensal"] = resultado_mensal
        status = "‚úÖ" if resultado_mensal else "‚ùå"
        print(f"{status} Mensal: {n_meses} meses (esperado: 12)")

    # Validar climatologia di√°ria
    if "diaria" in climatologias:
        clima_diaria = climatologias["diaria"]
        n_dias = len(clima_diaria.dayofyear)
        tem_dia_60 = 60 in clima_diaria.dayofyear.values
        resultado_diaria = n_dias == 365 and not tem_dia_60
        resultados["diaria"] = resultado_diaria
        status = "‚úÖ" if resultado_diaria else "‚ùå"
        print(f"{status} Di√°ria: {n_dias} dias, dia 60 removido: {not tem_dia_60}")

    # Validar climatologia pentadal
    if "pentadal" in climatologias:
        clima_pentadal = climatologias["pentadal"]
        n_pentadas = len(clima_pentadal.pentad)
        resultado_pentadal = n_pentadas == 73
        resultados["pentadal"] = resultado_pentadal
        status = "‚úÖ" if resultado_pentadal else "‚ùå"
        print(f"{status} Pentadal: {n_pentadas} pentadas (esperado: 73)")

    # Resultado geral
    todos_ok = all(resultados.values())
    status_geral = "‚úÖ" if todos_ok else "‚ùå"
    print(
        f"\n{status_geral} VALIDA√á√ÉO GERAL: {'APROVADA' if todos_ok else 'COM PROBLEMAS'}"
    )

    return resultados


def visualizar_climatologia(
    climatologia: xr.Dataset,
    tipo: str = "mensal",
    variavel: str = "olr",
    titulo_personalizado: str | None = None,
    salvar_figura: str | None = None,
) -> None:
    """
    Cria visualiza√ß√£o moderna de uma climatologia.

    Parameters
    ----------
    climatologia : xr.Dataset
        Dataset com a climatologia a ser visualizada
    tipo : str
        Tipo de climatologia ('mensal', 'diaria', 'pentadal')
    variavel : str
        Nome da vari√°vel a ser plotada (default: 'olr')
    titulo_personalizado : str, optional
        T√≠tulo personalizado para o gr√°fico
    salvar_figura : str, optional
        Caminho para salvar a figura (ex: './climatologia_mensal.png')
    """

    import matplotlib.pyplot as plt
    import seaborn as sns

    # Configurar estilo
    plt.style.use("default")
    sns.set_palette("husl")

    # Configurar dimens√µes e labels baseado no tipo
    config = {
        "mensal": {
            "dim": "month",
            "xlabel": "M√™s",
            "titulo": "Climatologia Mensal de OLR",
            "labels": [
                "Jan",
                "Fev",
                "Mar",
                "Abr",
                "Mai",
                "Jun",
                "Jul",
                "Ago",
                "Set",
                "Out",
                "Nov",
                "Dez",
            ],
        },
        "diaria": {
            "dim": "dayofyear",
            "xlabel": "Dia do Ano",
            "titulo": "Climatologia Di√°ria de OLR",
            "labels": None,
        },
        "pentadal": {
            "dim": "pentad",
            "xlabel": "Pentada (grupos de 5 dias)",
            "titulo": "Climatologia Pentadal de OLR",
            "labels": None,
        },
    }

    if tipo not in config:
        raise ValueError(f"Tipo '{tipo}' n√£o reconhecido. Use: {list(config.keys())}")

    # Validar climatologia
    validacao = validar_climatologia(climatologia, tipo)
    if not validacao["valida"]:
        print("‚ö†Ô∏è Problemas encontrados na climatologia:")
        for problema in validacao["problemas"]:
            print(f"   - {problema}")

    # Calcular m√©dia espacial para plotagem
    dados_medios = climatologia[variavel].mean(dim=["lat", "lon"])

    # Criar figura com subplots
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))

    # Plot 1: S√©rie temporal
    x_vals = dados_medios[config[tipo]["dim"]].values
    y_vals = dados_medios.values

    ax1.plot(
        x_vals,
        y_vals,
        "o-",
        linewidth=3,
        markersize=8,
        color="steelblue",
        label="Climatologia",
    )
    ax1.fill_between(x_vals, y_vals, alpha=0.3, color="steelblue")

    ax1.set_title(
        titulo_personalizado or config[tipo]["titulo"],
        fontsize=14,
        fontweight="bold",
    )
    ax1.set_xlabel(config[tipo]["xlabel"], fontsize=12)
    ax1.set_ylabel("OLR (W/m¬≤)", fontsize=12)
    ax1.grid(True, alpha=0.3)

    # Personalizar labels do eixo x para climatologia mensal
    if tipo == "mensal" and config[tipo]["labels"]:
        ax1.set_xticks(x_vals)
        ax1.set_xticklabels(config[tipo]["labels"])

    # Plot 2: Histograma dos valores
    ax2.hist(
        y_vals,
        bins=min(20, len(y_vals)),
        alpha=0.7,
        color="lightcoral",
        edgecolor="black",
    )
    ax2.set_title("Distribui√ß√£o dos Valores", fontsize=14, fontweight="bold")
    ax2.set_xlabel("OLR (W/m¬≤)", fontsize=12)
    ax2.set_ylabel("Frequ√™ncia", fontsize=12)
    ax2.grid(True, alpha=0.3)

    # Adicionar estat√≠sticas
    stats = validacao["estatisticas"]
    stats_text = (
        f"M√©dia: {stats['media']:.1f} W/m¬≤\n"
        f"Desvio: {stats['desvio_padrao']:.1f} W/m¬≤\n"
        f"Min: {stats['minimo']:.1f} W/m¬≤\n"
        f"Max: {stats['maximo']:.1f} W/m¬≤"
    )

    ax1.text(
        0.02,
        0.98,
        stats_text,
        transform=ax1.transAxes,
        verticalalignment="top",
        bbox=dict(boxstyle="round", facecolor="white", alpha=0.8),
        fontsize=10,
    )

    plt.tight_layout()

    # Salvar figura se solicitado
    if salvar_figura:
        plt.savefig(salvar_figura, dpi=300, bbox_inches="tight")
        print(f"üìä Figura salva em: {salvar_figura}")

    plt.show()

    # Imprimir resumo da valida√ß√£o
    print(f"\nüìã RESUMO DA CLIMATOLOGIA {tipo.upper()}:")
    print(
        f"   Status: {'‚úÖ V√°lida' if validacao['valida'] else '‚ùå Problemas encontrados'}"
    )
    if validacao["problemas"]:
        print("   Problemas:")
        for problema in validacao["problemas"]:
            print(f"     - {problema}")
    print(f"   Estat√≠sticas: {stats_text.replace(chr(10), ', ')}")


# Fun√ß√£o de conveni√™ncia para uso r√°pido
def criar_climatologia_rapida(
    anos: list[int], area_nordeste: bool = True, salvar: bool = True
) -> dict[str, xr.Dataset]:
    """
    Fun√ß√£o de conveni√™ncia para criar climatologia rapidamente.

    Parameters
    ----------
    anos : List[int]
        Lista de anos para processar
    area_nordeste : bool, default True
        Se True, usa √°rea padr√£o do Nordeste brasileiro
    salvar : bool, default True
        Se deve salvar os resultados

    Returns
    -------
    Dict[str, xr.Dataset]
        Climatologias criadas
    """

    # √Årea padr√£o do Nordeste brasileiro
    area_estudo = (-18, 2, -48, -32) if area_nordeste else None

    return criar_climatologia_olr(
        anos_inicio=min(anos),
        anos_fim=max(anos),
        anos_amostra=anos,
        area_estudo=area_estudo,
        salvar_netcdf=salvar,
        verbose=True,
    )


def processar_zcit_mes_por_mes(clima_mensal):
    """
    üîß PROCESSA CADA M√äS SEPARADAMENTE

    Como um chef que prepara cada prato individualmente,
    garantindo que cada m√™s seja processado corretamente.
    """
    print("üîß PROCESSANDO ZCIT M√äS POR M√äS (CORRE√á√ÉO DO ERRO 3D)")
    print("=" * 60)

    # Verificar dimens√µes
    print(f"üìä Dimens√µes do clima_mensal: {clima_mensal.olr.dims}")
    print(f"üìä Shape: {clima_mensal.olr.shape}")

    # Inicializar ferramentas
    processor = DataProcessor()
    detector = IQRDetector(constant=1.5)

    resultados_zcit = {}

    nomes_meses = [
        "Janeiro",
        "Fevereiro",
        "Mar√ßo",
        "Abril",
        "Maio",
        "Junho",
        "Julho",
        "Agosto",
        "Setembro",
        "Outubro",
        "Novembro",
        "Dezembro",
    ]

    # Processar cada m√™s individualmente
    for mes in range(1, 13):
        print(f"\nüóìÔ∏è Processando {nomes_meses[mes - 1]} (M√™s {mes})...")

        try:
            # ========================================================
            # CORRE√á√ÉO CR√çTICA: Selecionar M√äS ESPEC√çFICO (2D)
            # ========================================================
            dados_mes_2d = clima_mensal.olr.sel(month=mes)

            print(f"   üìä Dados do m√™s - Shape: {dados_mes_2d.shape}")
            print(f"   üìä Dimens√µes: {dados_mes_2d.dims}")

            # Verificar se agora √© 2D
            if dados_mes_2d.ndim != 2:
                print(
                    f"   ‚ùå ERRO: Dados ainda n√£o s√£o 2D! Dimens√µes: {dados_mes_2d.ndim}"
                )
                continue

            # ETAPA 1: Encontrar pontos de m√≠nimo OLR (AGORA 2D!)
            print("   üîç Aplicando find_minimum_coordinates em dados 2D...")
            min_coords = processor.find_minimum_coordinates(
                dados_mes_2d,  # ‚úÖ AGORA √â 2D (lat, lon)
                method="column_minimum",
                threshold=None,  # Autom√°tico
                search_radius=1,
            )

            print(f"   üìç Pontos de convec√ß√£o encontrados: {len(min_coords)}")

            if len(min_coords) == 0:
                print(f"   ‚ö†Ô∏è Nenhum ponto encontrado para {nomes_meses[mes - 1]}")
                resultados_zcit[mes] = {
                    "latitude_zcit": 0.0,
                    "pontos_validos": 0,
                    "pontos_outliers": 0,
                    "metodo": "sem_dados",
                    "olr_medio": float(dados_mes_2d.mean()),
                }
                continue

            # ETAPA 2: Detectar outliers usando IQRDetector
            print("   üß™ Removendo outliers com IQRDetector...")
            coords_validos, coords_outliers, resumo = detector.detect_outliers(
                min_coords
            )

            print("   ‚úÖ Pontos v√°lidos: {len(coords_validos)}")
            print("   üö´ Outliers removidos: {len(coords_outliers)}")

            # ETAPA 3: Calcular posi√ß√£o da ZCIT
            if len(coords_validos) > 0:
                # Extrair latitudes dos pontos v√°lidos
                latitudes_validas = [coord[1] for coord in coords_validos]

                # Calcular estat√≠sticas
                latitude_zcit = np.mean(latitudes_validas)
                desvio_lat = (
                    np.std(latitudes_validas) if len(latitudes_validas) > 1 else 0
                )
                lat_min = np.min(latitudes_validas)
                lat_max = np.max(latitudes_validas)

                print(
                    f"   üéØ ZCIT detectada: {latitude_zcit:+6.2f}¬∞N ¬± {desvio_lat:.2f}¬∞"
                )
                print(f"   üìè Range: {lat_min:+.1f}¬∞ a {lat_max:+.1f}¬∞")

                # Armazenar resultados
                resultados_zcit[mes] = {
                    "latitude_zcit": round(latitude_zcit, 2),
                    "desvio_padrao": round(desvio_lat, 2),
                    "pontos_validos": len(coords_validos),
                    "pontos_outliers": len(coords_outliers),
                    "latitude_min": round(lat_min, 2),
                    "latitude_max": round(lat_max, 2),
                    "coords_validos": coords_validos[
                        :10
                    ],  # Primeiros 10 para n√£o sobrecarregar
                    "metodo": "loczcit_iqr",
                    "olr_medio": float(dados_mes_2d.mean()),
                }

            else:
                print("   ‚ùå Todos os pontos foram outliers!")
                resultados_zcit[mes] = {
                    "latitude_zcit": 0.0,
                    "desvio_padrao": 0.0,
                    "pontos_validos": 0,
                    "pontos_outliers": len(coords_outliers),
                    "metodo": "outliers_apenas",
                    "olr_medio": float(dados_mes_2d.mean()),
                }

        except Exception as e:
            print(f"   ‚ùå Erro no processamento: {e}")
            resultados_zcit[mes] = {
                "latitude_zcit": 0.0,
                "desvio_padrao": 0.0,
                "pontos_validos": 0,
                "pontos_outliers": 0,
                "metodo": "erro",
                "olr_medio": 0.0,
            }

    return resultados_zcit


# ============================================================================
# üìä AN√ÅLISE E VISUALIZA√á√ÉO DOS RESULTADOS
# ============================================================================


def analisar_resultados_corrigidos(resultados_zcit):
    """
    üìä AN√ÅLISE DOS RESULTADOS CORRIGIDOS

    Como um estat√≠stico que examina os dados processados
    para extrair insights climatol√≥gicos.
    """
    print("\nüìä AN√ÅLISE DOS RESULTADOS CORRIGIDOS:")
    print("=" * 50)

    # Extrair dados
    meses = list(range(1, 13))
    latitudes = [resultados_zcit[mes]["latitude_zcit"] for mes in meses]
    desvios = [resultados_zcit[mes]["desvio_padrao"] for mes in meses]
    pontos = [resultados_zcit[mes]["pontos_validos"] for mes in meses]
    olr_medios = [resultados_zcit[mes]["olr_medio"] for mes in meses]

    nomes_meses = [
        "Jan",
        "Fev",
        "Mar",
        "Abr",
        "Mai",
        "Jun",
        "Jul",
        "Ago",
        "Set",
        "Out",
        "Nov",
        "Dez",
    ]

    # Mostrar resultados m√™s a m√™s
    print("üóìÔ∏è POSI√á√ïES DA ZCIT POR M√äS:")
    for i, (mes, lat, dev, pts, olr) in enumerate(
        zip(meses, latitudes, desvios, pontos, olr_medios, strict=False)
    ):
        print(
            f"   üìÖ {nomes_meses[i]:3s}: ZCIT={lat:+6.2f}¬∞N ¬± {dev:4.2f}¬∞ "
            f"({pts:3d} pts, OLR={olr:.1f})"
        )

    # Calcular estat√≠sticas anuais
    latitudes_validas = [lat for lat in latitudes if lat != 0.0]

    if latitudes_validas:
        amplitude = max(latitudes_validas) - min(latitudes_validas)
        posicao_media = np.mean(latitudes_validas)
        variabilidade = np.std(latitudes_validas)

        idx_max = latitudes.index(max(latitudes_validas))
        idx_min = latitudes.index(min(latitudes_validas))

        print("\nüìà ESTAT√çSTICAS ANUAIS:")
        print(
            f"   üî∫ Posi√ß√£o mais ao NORTE: {nomes_meses[idx_max]} ({latitudes[idx_max]:+.2f}¬∞N)"
        )
        print(
            f"   üîª Posi√ß√£o mais ao SUL: {nomes_meses[idx_min]} ({latitudes[idx_min]:+.2f}¬∞N)"
        )
        print(f"   üìè Amplitude anual: {amplitude:.1f}¬∞")
        print(f"   üß≠ Posi√ß√£o m√©dia: {posicao_media:+.2f}¬∞N")
        print(f"   üìä Variabilidade: ¬±{variabilidade:.2f}¬∞")

        # Qualidade dos dados
        pontos_total = sum(pontos)
        pontos_medio = np.mean(pontos)

        print("\nüîç QUALIDADE DOS DADOS:")
        print(f"   üìç Total de pontos v√°lidos: {pontos_total}")
        print(f"   üìä M√©dia de pontos por m√™s: {pontos_medio:.1f}")

        meses_problem√°ticos = [nomes_meses[i] for i, p in enumerate(pontos) if p < 10]
        if meses_problem√°ticos:
            print(f"   ‚ö†Ô∏è Meses com poucos pontos: {meses_problem√°ticos}")

        return {
            "latitudes": latitudes,
            "desvios": desvios,
            "pontos": pontos,
            "amplitude": amplitude,
            "posicao_media": posicao_media,
            "variabilidade": variabilidade,
            "mes_max_norte": idx_max + 1,
            "mes_max_sul": idx_min + 1,
        }
    print("‚ùå Nenhum dado v√°lido encontrado!")
    return None


# ============================================================================
# üé® GR√ÅFICO CIENT√çFICO FINAL
# ============================================================================


def criar_grafico_zcit_final(resultados_zcit, estatisticas=None):
    """
    üé® GR√ÅFICO CIENT√çFICO FINAL

    Como um artista que finalmente tem as cores certas
    para pintar o retrato fiel da ZCIT.
    """
    print("\nüé® CRIANDO GR√ÅFICO CIENT√çFICO FINAL...")

    # Extrair dados
    meses = np.arange(1, 13)
    latitudes = [resultados_zcit[mes]["latitude_zcit"] for mes in meses]
    desvios = [resultados_zcit[mes]["desvio_padrao"] for mes in meses]

    nomes_meses = [
        "Jan",
        "Fev",
        "Mar",
        "Abr",
        "Mai",
        "Jun",
        "Jul",
        "Ago",
        "Set",
        "Out",
        "Nov",
        "Dez",
    ]

    # Configurar figura
    fig, ax = plt.subplots(figsize=(14, 8))

    # Plot principal
    ax.plot(
        meses,
        latitudes,
        "o-",
        linewidth=3,
        markersize=10,
        color="steelblue",
        label="Posi√ß√£o Climatol√≥gica da ZCIT",
        markerfacecolor="white",
        markeredgewidth=2,
    )

    # Barras de erro
    ax.errorbar(
        meses,
        latitudes,
        yerr=desvios,
        fmt="none",
        capsize=8,
        capthick=3,
        color="red",
        alpha=0.8,
        linewidth=2,
        label="Desvio Padr√£o (¬±œÉ)",
    )

    # Linha do equador
    ax.axhline(
        y=0,
        color="black",
        linestyle="--",
        alpha=0.8,
        linewidth=2,
        label="Equador (0¬∞)",
    )

    # Anota√ß√µes nos pontos
    for i, (mes, lat) in enumerate(zip(meses, latitudes, strict=False)):
        if lat != 0:  # S√≥ anotar se h√° dados v√°lidos
            ax.annotate(
                f"{lat:+.1f}¬∞",
                xy=(mes, lat),
                xytext=(0, 15),
                textcoords="offset points",
                ha="center",
                va="bottom",
                fontsize=11,
                fontweight="bold",
                bbox=dict(
                    boxstyle="round,pad=0.2",
                    facecolor="white",
                    edgecolor="blue",
                    alpha=0.8,
                ),
            )

    # Personaliza√ß√£o
    ax.set_xlabel("M√™s", fontsize=16, fontweight="bold")
    ax.set_ylabel("Latitude da ZCIT (¬∞N)", fontsize=16, fontweight="bold")

    # T√≠tulo
    if estatisticas:
        amplitude = estatisticas["amplitude"]
        titulo = (
            f"Climatologia da ZCIT - Metodologia LOCZCIT-IQR\n"
            f"An√°lise M√™s por M√™s (Amplitude: {amplitude:.1f}¬∞)"
        )
    else:
        titulo = "Climatologia da ZCIT - Metodologia LOCZCIT-IQR\nAn√°lise M√™s por M√™s"

    ax.set_title(titulo, fontsize=18, fontweight="bold", pad=20)

    # Eixos
    ax.set_xticks(meses)
    ax.set_xticklabels(nomes_meses, fontsize=12)
    ax.tick_params(axis="y", labelsize=12)

    # Grid e legenda
    ax.grid(True, alpha=0.3)
    ax.legend(fontsize=14, loc="upper right")

    # Zonas sazonais
    ax.axvspan(11.5, 12.5, alpha=0.15, color="red")
    ax.axvspan(0.5, 3.5, alpha=0.15, color="red")
    ax.axvspan(6.5, 8.5, alpha=0.15, color="blue")

    # Ajustes finais
    lat_validas = [lat for lat in latitudes if lat != 0]
    if lat_validas:
        y_min = min(lat_validas) - 2
        y_max = max(lat_validas) + 2
        ax.set_ylim(y_min, y_max)

    ax.set_xlim(0.5, 12.5)

    plt.tight_layout()

    # Salvar
    nome_arquivo = "zcit_climatologia_corrigida_mes_por_mes.png"
    plt.savefig(nome_arquivo, dpi=300, bbox_inches="tight")
    print(f"‚úÖ Gr√°fico salvo: {nome_arquivo}")

    plt.show()

    return fig


# ============================================================================
# üöÄ EXECU√á√ÉO COMPLETA CORRIGIDA
# ============================================================================


def executar_analise_completa_corrigida(clima_mensal):
    """
    üöÄ EXECU√á√ÉO COMPLETA CORRIGIDA

    Processa tudo de forma correta, m√™s por m√™s.
    """
    print("üöÄ EXECUTANDO AN√ÅLISE COMPLETA CORRIGIDA")
    print("=" * 60)
    print("üîß CORRE√á√ïES APLICADAS:")
    print("   ‚úÖ Processamento m√™s por m√™s (2D)")
    print("   ‚úÖ Metodologia LOCZCIT-IQR adequada")
    print("   ‚úÖ Remo√ß√£o de outliers com IQRDetector")
    print("   ‚úÖ C√°lculo robusto de posi√ß√µes")
    print("=" * 60)

    try:
        # Etapa 1: Processar m√™s por m√™s
        resultados_zcit = processar_zcit_mes_por_mes(clima_mensal)

        # Etapa 2: Analisar resultados
        estatisticas = analisar_resultados_corrigidos(resultados_zcit)

        # Etapa 3: Criar gr√°fico
        if estatisticas:
            figura = criar_grafico_zcit_final(resultados_zcit, estatisticas)
        else:
            figura = criar_grafico_zcit_final(resultados_zcit)

        print("\nüéâ AN√ÅLISE COMPLETA CORRIGIDA CONCLU√çDA!")

        return {
            "resultados_zcit": resultados_zcit,
            "estatisticas": estatisticas,
            "figura": figura,
        }

    except Exception as e:
        print(f"‚ùå ERRO: {e}")
        import traceback

        traceback.print_exc()
        return None


def plotar_atlas_climatologico_mensal(
    clima_mensal: xr.Dataset,
    titulo: str = "Atlas Climatol√≥gico Mensal - Radia√ß√£o de Onda Longa (OLR)",
    subtitulo: str = "Baseado em Climatologia NOAA",
    figsize: tuple[float, float] = (20, 15),
    save_path: str | Path | None = None,
    dpi: int = 300,
    **kwargs,
) -> tuple[plt.Figure, list[plt.Axes]]:
    """
    Cria um atlas climatol√≥gico mensal com 12 pain√©is (um para cada m√™s).

    Esta vers√£o foi corrigida para usar um layout profissional com plt.subplots,
    evitando problemas de espa√ßamento, e garante que a fun√ß√£o sempre retorne
    (fig, axes) para evitar o TypeError.
    """
    print("üó∫Ô∏è Criando atlas climatol√≥gico mensal com layout profissional...")
    import cartopy.feature as cfeature
    from cartopy.mpl.gridliner import LATITUDE_FORMATTER, LONGITUDE_FORMATTER

    # --- Setup Inicial e Valida√ß√£o (do seu c√≥digo original) ---
    try:
        from loczcit_iqr.plotting.visualizer import ZCITColormap

        cmap_classic = ZCITColormap.get_colormap(name="classic")
        print("‚úÖ Usando paleta de cores 'classic' da biblioteca loczcit_iqr")
    except ImportError:
        cmap_classic = "gist_ncar_r"  # Fallback para uma paleta profissional
        print("‚ö†Ô∏è Usando paleta padr√£o 'gist_ncar_r' (loczcit_iqr n√£o encontrada)")

    if "olr" not in clima_mensal.data_vars:
        raise ValueError("Dataset deve conter vari√°vel 'olr'")
    if "month" not in clima_mensal.dims or len(clima_mensal.month) != 12:
        raise ValueError("Dataset deve conter uma dimens√£o 'month' com 12 meses.")

    config = {
        "vmin": kwargs.get("vmin", 180),
        "vmax": kwargs.get("vmax", 300),
        "levels": kwargs.get("levels", np.arange(180, 301, 10)),
    }

    # ========================================================================
    # CORRE√á√ÉO PRINCIPAL: Usar plt.subplots para um layout robusto
    # ========================================================================
    fig, axes = plt.subplots(
        nrows=3,
        ncols=4,
        figsize=figsize,
        subplot_kw={"projection": ccrs.PlateCarree()},
    )
    axes = axes.flatten()  # Transforma a matriz 3x4 de eixos em uma lista de 12

    contour = None  # Para a barra de cores

    try:
        for i, ax in enumerate(axes):
            mes = i + 1
            dados_mes = clima_mensal.olr.sel(month=mes)
            olr_medio = float(dados_mes.mean())

            print(f"  üìÖ Plotando {meses_em_portugues[mes]}...")

            # Plotar contorno preenchido
            contour = ax.contourf(
                dados_mes.lon,
                dados_mes.lat,
                dados_mes,
                transform=ccrs.PlateCarree(),
                cmap=cmap_classic,
                levels=config["levels"],
                extend="both",
            )

            # Adicionar features geogr√°ficas
            ax.add_feature(
                cfeature.COASTLINE.with_scale("50m"),
                edgecolor="black",
                linewidth=0.7,
            )
            ax.add_feature(
                cfeature.BORDERS.with_scale("50m"),
                edgecolor="gray",
                linewidth=0.4,
                linestyle="--",
            )

            # Configurar gridlines (l√≥gica do seu c√≥digo, que √© boa)
            gl = ax.gridlines(draw_labels=True, alpha=0.5, linestyle="--", color="gray")
            gl.top_labels = gl.right_labels = False
            gl.left_labels = i % 4 == 0
            gl.bottom_labels = i >= 8
            gl.xformatter = LONGITUDE_FORMATTER
            gl.yformatter = LATITUDE_FORMATTER
            gl.xlabel_style = {"size": 8, "color": "black"}
            gl.ylabel_style = {"size": 8, "color": "black"}

            # T√≠tulo do subplot
            ax.set_title(meses_em_portugues[mes], fontsize=14, fontweight="bold")

            # Texto com OLR m√©dio (do seu c√≥digo)
            ax.text(
                0.03,
                0.05,
                f"OLR: {olr_medio:.1f} W/m¬≤",
                transform=ax.transAxes,
                fontsize=9,
                bbox=dict(boxstyle="round,pad=0.3", facecolor="white", alpha=0.8),
            )

    except Exception as e:
        print(f"‚ùå Erro durante a plotagem dos pain√©is: {e}")
        fig.text(0.5, 0.5, f"ERRO NA PLOTAGEM:\n{e}", ha="center", color="red")

    # ========================================================================
    # CORRE√á√ÉO DE LAYOUT: Ajuste fino do espa√ßamento e adi√ß√£o de elementos globais
    # ========================================================================
    fig.subplots_adjust(
        top=0.9, bottom=0.1, left=0.05, right=0.95, hspace=0.17, wspace=0.07
    )

    # T√≠tulos principais
    fig.suptitle(titulo, fontsize=24, fontweight="bold", y=0.98)
    fig.text(0.5, 0.94, subtitulo, fontsize=16, ha="center", style="italic")

    # Barra de cores global na parte inferior
    if contour:
        cbar_ax = fig.add_axes([0.2, 0.06, 0.6, 0.025])
        cbar = fig.colorbar(
            contour, cax=cbar_ax, orientation="horizontal", extend="both"
        )
        cbar.set_label("Radia√ß√£o de Onda Longa (W/m¬≤)", fontsize=12, fontweight="bold")

    # Informa√ß√µes t√©cnicas (do seu c√≥digo)
    try:
        info_text = f"Fonte: {clima_mensal.attrs.get('fonte', 'N/A')} | Per√≠odo: {clima_mensal.attrs.get('periodo', 'N/A')}"
        fig.text(
            0.5,
            0.01,
            info_text,
            fontsize=10,
            ha="center",
            style="italic",
            color="gray",
        )
    except Exception:
        pass  # Ignora se n√£o conseguir ler atributos

    # Salvar figura (do seu c√≥digo)
    if save_path:
        print(f"üíæ Salvando atlas em: {save_path}")
        fig.savefig(save_path, dpi=dpi, bbox_inches="tight", facecolor="white")

    print("‚úÖ Atlas climatol√≥gico criado com sucesso!")

    # ========================================================================
    # CORRE√á√ÉO TypeError: Garantir que a fun√ß√£o SEMPRE retorne a tupla
    # ========================================================================
    return fig, axes


# ============================================================================
# FUN√á√ÉO DE CONVENI√äNCIA PARA USO R√ÅPIDO
# ============================================================================


def criar_atlas_climatologico_rapido(
    clima_mensal: xr.Dataset, save_path: str = "atlas_climatologia_mensal.png"
) -> tuple[plt.Figure, list[plt.Axes]]:
    """
    Vers√£o simplificada para criar atlas rapidamente.

    ANALOGIA DO CHEF EXECUTIVO üë®‚Äçüç≥
    Como um chef executivo que prepara um prato especial de forma
    r√°pida mas mantendo a qualidade, esta fun√ß√£o cria um atlas
    climatol√≥gico com configura√ß√µes otimizadas.

    Parameters
    ----------
    clima_mensal : xr.Dataset
        Dataset com climatologia mensal
    save_path : str, default "atlas_climatologia_mensal.png"
        Caminho para salvar

    Returns
    -------
    fig, axes : matplotlib objects
        Figura e eixos criados

    Examples
    --------
    >>> # Uso super r√°pido
    >>> fig, axes = criar_atlas_climatologico_rapido(clima_mensal)

    >>> # Com caminho personalizado
    >>> fig, axes = criar_atlas_climatologico_rapido(
    ...     clima_mensal,
    ...     save_path="meu_atlas.png"
    ... )
    """
    return plotar_atlas_climatologico_mensal(
        clima_mensal,
        titulo="Atlas Climatol√≥gico Mensal - OLR",
        subtitulo="Baseado em Climatologia NOAA",
        save_path=save_path,
        figsize=(16, 12),
        dpi=200,
    )


# ============================================================================
# FUN√á√ÉO PARA VALIDAR DADOS ANTES DE PLOTAR
# ============================================================================


def validar_dados_atlas(clima_mensal: xr.Dataset) -> dict[str, Any]:
    """
    Valida se o dataset est√° adequado para plotar o atlas.

    ANALOGIA DO INSPETOR DE QUALIDADE üîç
    Como um inspetor que verifica se todos os ingredientes
    est√£o frescos antes de autorizar o preparo do prato.

    Parameters
    ----------
    clima_mensal : xr.Dataset
        Dataset a ser validado

    Returns
    -------
    Dict[str, Any]
        Relat√≥rio de valida√ß√£o com problemas encontrados

    Examples
    --------
    >>> relatorio = validar_dados_atlas(clima_mensal)
    >>> if relatorio['valido']:
    ...     print("‚úÖ Dados v√°lidos para plotar atlas")
    >>> else:
    ...     print("‚ùå Problemas encontrados:", relatorio['problemas'])
    """

    problemas = []
    detalhes = {}

    print("üîç VALIDANDO DADOS PARA ATLAS CLIMATOL√ìGICO...")

    # Verificar se √© um Dataset
    if not isinstance(clima_mensal, xr.Dataset):
        problemas.append("Dados devem ser um xarray.Dataset")
        return {"valido": False, "problemas": problemas, "detalhes": detalhes}

    # Verificar vari√°vel OLR
    if "olr" not in clima_mensal.data_vars:
        problemas.append("Vari√°vel 'olr' n√£o encontrada")
    else:
        detalhes["olr_dims"] = list(clima_mensal.olr.dims)
        detalhes["olr_shape"] = clima_mensal.olr.shape

        # Verificar dimens√µes da vari√°vel OLR
        dims_esperadas = ["month", "lat", "lon"]
        dims_olr = list(clima_mensal.olr.dims)

        for dim in dims_esperadas:
            if dim not in dims_olr:
                problemas.append(f"Dimens√£o '{dim}' n√£o encontrada em olr")

    # Verificar dimens√£o month
    if "month" not in clima_mensal.dims:
        problemas.append("Dimens√£o 'month' n√£o encontrada")
    else:
        n_meses = len(clima_mensal.month)
        detalhes["n_meses"] = n_meses
        detalhes["meses_valores"] = list(clima_mensal.month.values)

        if n_meses != 12:
            problemas.append(f"Esperado 12 meses, encontrado {n_meses}")

        # Verificar se meses s√£o 1-12
        meses_esperados = list(range(1, 13))
        meses_encontrados = sorted(clima_mensal.month.values)
        if meses_encontrados != meses_esperados:
            problemas.append(f"Meses devem ser 1-12, encontrado {meses_encontrados}")

    # Verificar coordenadas lat/lon
    for coord in ["lat", "lon"]:
        if coord not in clima_mensal.coords:
            problemas.append(f"Coordenada '{coord}' n√£o encontrada")
        else:
            valores = clima_mensal[coord].values
            detalhes[f"{coord}_range"] = (
                float(valores.min()),
                float(valores.max()),
            )
            detalhes[f"{coord}_size"] = len(valores)

            # Verificar se coordenadas fazem sentido
            if coord == "lat":
                if valores.min() < -90 or valores.max() > 90:
                    problemas.append(
                        f"Latitudes fora do range v√°lido (-90, 90): {valores.min():.1f} a {valores.max():.1f}"
                    )
            elif coord == "lon":
                if valores.min() < -180 or valores.max() > 360:
                    problemas.append(
                        f"Longitudes fora do range v√°lido (-180, 360): {valores.min():.1f} a {valores.max():.1f}"
                    )

    # Verificar valores OLR
    if "olr" in clima_mensal.data_vars:
        olr_values = clima_mensal.olr.values
        detalhes["olr_range"] = (
            float(np.nanmin(olr_values)),
            float(np.nanmax(olr_values)),
        )
        detalhes["olr_mean"] = float(np.nanmean(olr_values))
        detalhes["has_nan"] = bool(np.isnan(olr_values).any())
        detalhes["percent_valid"] = float(
            100 * np.isfinite(olr_values).sum() / olr_values.size
        )

        # Verificar range t√≠pico de OLR
        olr_min, olr_max = detalhes["olr_range"]
        if olr_min < 100 or olr_max > 400:
            problemas.append(
                f"Valores OLR fora do range t√≠pico (100-400 W/m¬≤): {olr_min:.1f} a {olr_max:.1f}"
            )

        if detalhes["percent_valid"] < 50:
            problemas.append(
                f"Muitos valores inv√°lidos: apenas {detalhes['percent_valid']:.1f}% v√°lidos"
            )

    # Verificar atributos importantes
    attrs_importantes = ["fonte", "periodo", "versao_loczcit"]
    detalhes["atributos"] = {}
    for attr in attrs_importantes:
        if attr in clima_mensal.attrs:
            detalhes["atributos"][attr] = clima_mensal.attrs[attr]
        else:
            detalhes["atributos"][attr] = "N√£o encontrado"

    # Resultado final
    valido = len(problemas) == 0

    print(f"   üìä Dimens√µes: {dict(clima_mensal.dims)}")
    print(f"   üóìÔ∏è  Meses: {detalhes.get('n_meses', 'N/A')}")
    print(f"   üìè Range OLR: {detalhes.get('olr_range', 'N/A')} W/m¬≤")
    print(f"   ‚úÖ Dados v√°lidos: {detalhes.get('percent_valid', 'N/A'):.1f}%")

    if valido:
        print("‚úÖ Valida√ß√£o aprovada - dados prontos para atlas!")
    else:
        print("‚ùå Problemas encontrados:")
        for problema in problemas:
            print(f"   - {problema}")

    return {"valido": valido, "problemas": problemas, "detalhes": detalhes}


# Executar teste apenas se chamado diretamente
if __name__ == "__main__":
    # ... c√≥digo de exemplo j√° executado ...

    # Executar teste das novas funcionalidades
    _testar_novas_funcionalidades()
